# ATS Integration JSONata Patterns

## Core Functions
- `$map()` - Transform arrays of data
- `$filter()` - Conditional data processing
- `$exists()` - Null checks and field validation
- `$now()` - Current timestamps
- `$replace()` - Date formatting and timezone removal
- `$count()` - Array length checks
- `$merge()` - Combine objects
- `$reduce()` - Array aggregation
- `$lookup()` - Access properties by name
- `$split()` - String parsing
- `$number()` - Type conversion
- `$fromMillis()` and `$toMillis()` - Date conversion
- `$uuid()` - UUID generation
- `$string()` - String conversion
- `$substringBefore()` and `$substringAfter()` - String manipulation
- `$eval()` - Dynamic expression evaluation

## Common Patterns

### Array Mapping
```jsonata
$map($$, function($item) {
  {
    "atsJobId": $item.id,
    "title": $item.title,
    "status": $item.status = 'active' ? 'OPEN' : 'CLOSED'
  }
})
```

### Conditional Processing
```jsonata
$count(data) > 0 ? [$] : null
```

### Date Formatting
```jsonata
// Remove timezone offsets
$replace($date, /\\+\\d{2}:\\d{2}$/, "")

// Robust date parsing (MM/dd/yyyy to ISO)
$date != null and $date != "" and $date != "Incomplete" and $count($split($date, "/")) = 3 and $split($date, "/")[1] != "" and $split($date, "/")[2] != "" and $split($date, "/")[3] != "" and $number($split($date, "/")[1]) > 0 and $number($split($date, "/")[1]) <= 12 and $number($split($date, "/")[2]) > 0 and $number($split($date, "/")[2]) <= 31 and $number($split($date, "/")[3]) > 1900 ? $fromMillis($toMillis($split($date, "/")[3] & "-" & ($number($split($date, "/")[1]) < 10 ? "0" & $split($date, "/")[1] : $split($date, "/")[1]) & "-" & ($number($split($date, "/")[2]) < 10 ? "0" & $split($date, "/")[2] : $split($date, "/")[2]) & "T00:00:00Z")) : null
```

### SAP Date Parsing
```jsonata
// Parse SAP date format
$fromMillis($number($substringBefore($substringAfter($string($date), "("), "+")))
```

### Null Checks
```jsonata
$exists($field) and $field != null
```

### Array Filtering
```jsonata
$filter($array, function($item) { $item.status = 'active' })
```

### UUID Generation
```jsonata
// Generate UUID for required fields
$uuid()
```

### Complex Object Mapping
```jsonata
// Map nested objects with validation
$map($$, function($job) {
  {
    "atsJobId": $job.Ref,
    "title": $job.Title,
    "description": $job.ExternalDescription,
    "locations": $job.AddressDetails != null ? [{
      "isPrimary": true,
      "city": $job.AddressDetails.City,
      "state": $job.AddressDetails.State,
      "country": $job.AddressDetails.Country,
      "postalCode": $job.AddressDetails.PostalCode
    }] : [],
    "customFields": {
      "jobId": $job.Id,
      "cornerstoneJobData": $job
    }
  }
})
```

### Phone Number Array Mapping
```jsonata
// Map phone numbers to array format
"phoneNumbers": $phone != null and $phone != "" ? [{
  "isPrimary": true,
  "phoneNumber": $phone,
  "countryCode": null,
  "customFields": {}
}] : []
```

### Address Object Mapping
```jsonata
// Map address with custom fields
"address": {
  "city": $candidate.City,
  "state": $candidate.State,
  "country": $candidate.Country,
  "postalCode": $candidate.PostalCode,
  "customFields": {
    "addressLine1": $candidate.AddressLine1,
    "addressLine2": $candidate.AddressLine2
  }
}
```

### Recruiter Array Mapping
```jsonata
// Map recruiters to array format
"recruiters": $job.Recruiters != null ? $map($job.Recruiters, function($recruiter) {
  $recruiter.email
}) : []
```

### Hiring Manager Array Mapping
```jsonata
// Map hiring managers to array format
"hiringManagers": $job.HiringManager != null ? [$job.HiringManager.Name] : []
```

### Status Mapping
```jsonata
// Map status with defaults
"status": $status != null and $status != "" ? $status : "APPLIED"
```

### Stage Name Mapping
```jsonata
// Map stage names with validation
"stageName": $stage.Status != null and $stage.Status != "" ? $stage.Status : "APPLIED"
```

## Context Variables
- `$` - Current context in JSONata expressions
- `$$` - Root context when needed
- `inputData` - Access input parameters

## Validation Patterns
```jsonata
// Required field validation
$exists(inputData.candidate.firstName) and inputData.candidate.firstName != null

// Array validation
$count($$) > 0

// Complex validation
$reduce($map($$, function($v) { $exists($v.id) }), function($acc, $v) { $acc and $v })

// Date validation
$date != null and $date != "" and $date != "Incomplete" and $count($split($date, "/")) = 3
```

## Advanced Patterns

### Question Processing (SAP)
```jsonata
// Process complex question structures
$inputType := function($input) {
  $input="QUESTION_NUMERIC" ? "TEXT" :
  $input="QUESTION_TEXT" ? "TEXT" :
  $input="QUESTION_RATING" ? "SELECT" :
  $input="QUESTION_MULTI_CHOICE" ? "SELECT" :
  $input="RADIO" ? "RADIO" :
  $input="CHECKBOX" ? "CHECKBOX" :
  $input="TEXTAREA" ? "TEXT_AREA" :
  $input="INFORMATION" ? "LABEL" :
  "UNKNOWN"
};

$questionObj := function($sapQuestion, $sapQuestionChoices, $sapQuestions) {
  {
    "type": "QUESTION",
    "id": $sapQuestion.order,
    "label": $sapQuestion.questionName,
    "field": "additionalFields." & $sapQuestion.order & "_Question",
    "inputType": $inputType($sapQuestion.questionType),
    "isMultiValue": false,
    "properties": {
      "isMandatory": $sapQuestion.required
    },
    "inputOptionList": $inputOptionListObj($sapQuestionChoices),
    "inputValidation": $inputValidationObj($sapQuestion),
    "dependencyCriteria": $sapQuestion.questionParentId != "-1" ? $dependencyCriteriaObj($sapQuestion, $sapQuestions) : null
  }
}
```

### Complex Error Handling
```jsonata
// Handle multiple error scenarios
$exists(sap_create_application_for_new_candidate[0].errorMessage) ? 
  ($exists(sap_create_application_for_existing_candidate[0].errorMessage) ? 
    {
      "data": null,
      "errors": [{
        "errorCode": "500",
        "errorType": "Internal error",
        "message": "Error while creating application on sap.",
        "params": {
          "sap_create_application_for_new_candidate_error": $string(sap_create_application_for_new_candidate[0].errorMessages),
          "sap_create_application_for_existing_candidate_error": $string(sap_create_application_for_existing_candidate[0].errorMessages),
          "error": $string($)
        }
      }]
    } : 
    {
      "data": {
        "candidateId": sap_create_application_for_existing_candidate[0].candidateId,
        "applicationId": sap_create_application_for_existing_candidate[0].applicationId,
        "customFields": {
          "jobId": sap_create_application_for_existing_candidate[0].jobId
        }
      }
    }
  ) : 
  {
    "data": {
      "candidateId": sap_create_application_for_new_candidate[0].candidateId,
      "applicationId": sap_create_application_for_new_candidate[0].applicationId,
      "customFields": {
        "jobId": sap_create_application_for_new_candidate[0].jobId
      }
    }
  }
```

### Integration Dependency Looping
```jsonata
// Loop through statuses for API calls
["New Submission", "In Review", "Phone Screening", "Interview", "Background Check", "Offer Letter", "Closed", "Hired"]
```

## Reference Examples
- [cornerstone_data_model_integrations.json](mdc:ats_integrations/cornerstone_data_model_integrations.json) - Lines 794-870 for complex job mapping
- [SAP_data_model_integrations.json](mdc:ats_integrations/SAP_data_model_integrations.json) - Lines 57-200 for question processing patterns
- [pinpoint-new_data_model_integrations.json](mdc:ats_integrations/pinpoint-new_data_model_integrations.json) - Lines 15-25 for simple job mapping
- [apploi_data_model_integrations.json](mdc:ats_integrations/apploi_data_model_integrations.json) - Lines 20-40 for application mapping

---
globs: *.json
---
