---
globs: *.json
---

# ATS Integration Development Rules

## File Structure
- Store all integrations in `ats_integrations/` directory
- Naming: `{ats_name}_data_model_integrations.json`
- Integration IDs: `{ats}-{action}-{entity}` (e.g., `cornerstone-get-applications`)

## Data Models
- **JOB**: Job posting data with locations, departments, recruiters
- **CANDIDATE**: Candidate profile data with addresses, phone numbers
- **APPLICATION**: Job application data with status tracking
- **APPLICATION_STAGE**: Application workflow stages with audit trails
- **JOB_QUESTION**: Job-specific questions, forms, and screening questions

## Integration Types
- **REST_API**: Read operations from ATS (GET requests)
- **WRITE_REST_API**: Write operations to ATS (POST/PUT/PATCH)
- **WEBHOOK**: Real-time event processing
- **REST_API_RESPONSE_HANDLER**: Response processing for complex workflows
- **WRITE_API_RESPONSE_HANDLER**: Write operation response handling

## Authentication
- Support: `["API_KEY"]`, `["OAUTH_2"]`, `["BASIC"]`, `["SECURED_OAUTH2"]`, `["AWS Signature Version 4 (SigV4)"]`
- Use `{{api_key}}`, `{{access_token}}`, `{{client_id}}`, `{{client_secret}}` templates
- Include: `Content-Type: application/json`, `Accept: application/json`

## JSONata Rules
- Use `$map()` for array transformations
- Use `$filter()` for conditional processing
- Use `$exists()` for null checks and field validation
- Use `$now()` for timestamps
- Use `$replace()` for date formatting and timezone removal
- Use `$count()` for array length checks
- Use `$merge()` for combining objects
- Use `$reduce()` for array aggregation
- Use `$lookup()` for property access
- Use `$split()` for string parsing
- Use `$number()` for type conversion
- Use `$fromMillis()` and `$toMillis()` for date conversion
- Use `$uuid()` for UUID generation

## Response Types
- **ARRAY_OF_ENTITIES**: Bulk data fetching with pagination
- **SINGLE_ENTITY**: Single record operations

## Pagination & Date Range
```json
"paginationConfig": {
  "type": "PageConfig",
  "pageSize": 100,
  "pageNumberKey": "page",
  "hasMoreDataJsonataExpression": "$exists($.d.__next)"
},
"dateRangeConfig": {
  "startDateTimeKey": "lastModifiedSince",
  "endDateTimeKey": "lastModifiedBefore",
  "dateTimeFormat": "yyyy-MM-dd'T'HH:mm:ss"
}
```

## Target Fields (Always Required)

### Job Target Fields
```json
"targetFields": [
  "JOVEO_JOB_ID", "JOVEO_JOB_CUSTOMER_ID", "ATS_JOB_ID",
  "ATS_JOB_REF_NUMBER", "ATS_JOB_TITLE", "ATS_JOB_DESCRIPTION",
  "ATS_JOB_URL", "ATS_JOB_STATUS", "ATS_JOB_DEPARTMENT",
  "ATS_JOB_COMPANY", "ATS_JOB_LOCATIONS", "ATS_JOB_CREATED_DATE",
  "ATS_JOB_LAST_UPDATED_DATE", "ATS_JOB_START_DATE", "ATS_JOB_END_DATE",
  "ATS_JOB_INSERTED_AT", "ATS_JOB_UPDATED_AT", "ATS_JOB_IS_DELETED",
  "ATS_JOB_CUSTOM_FIELDS", "ATS_JOB_AUDIT", "ATS_JOB_POSITION_CATEGORY",
  "ATS_JOB_POSITION_LEVEL", "ATS_JOB_REMOTE_TYPE", "ATS_JOB_RECRUITERS",
  "ATS_JOB_HIRING_MANAGERS"
]
```

### Candidate Target Fields
```json
"targetFields": [
  "JOVEO_CANDIDATE_ID", "JOVEO_CANDIDATE_CUSTOMER_ID", "ATS_CANDIDATE_ID",
  "ATS_CANDIDATE_FIRST_NAME", "ATS_CANDIDATE_LAST_NAME", "ATS_CANDIDATE_EMAIL",
  "ATS_CANDIDATE_PHONE_NUMBERS", "ATS_CANDIDATE_ADDRESS", "ATS_CANDIDATE_CREATED_DATE",
  "ATS_CANDIDATE_LAST_UPDATED_DATE", "ATS_CANDIDATE_INSERTED_AT",
  "ATS_CANDIDATE_UPDATED_AT", "ATS_CANDIDATE_IS_DELETED",
  "ATS_CANDIDATE_CUSTOM_FIELDS", "ATS_CANDIDATE_AUDIT"
]
```

### Application Target Fields
```json
"targetFields": [
  "JOVEO_APPLICATION_ID", "JOVEO_APPLICATION_CUSTOMER_ID", "ATS_APPLICATION_ID",
  "ATS_APPLICATION_CANDIDATE_ID", "ATS_APPLICATION_JOB_ID", "ATS_APPLICATION_STATUS",
  "ATS_APPLICATION_APPLIED_DATE", "ATS_APPLICATION_CREATED_DATE",
  "ATS_APPLICATION_LAST_UPDATED_DATE", "ATS_APPLICATION_INSERTED_AT",
  "ATS_APPLICATION_UPDATED_AT", "ATS_APPLICATION_IS_DELETED",
  "ATS_APPLICATION_CUSTOM_FIELDS", "ATS_APPLICATION_AUDIT", "ATS_APPLICATION_SOURCE",
  "ATS_APPLICATION_ANSWERS", "ATS_APPLICATION_TAGS"
]
```

### Application Stage Target Fields
```json
"targetFields": [
  "JOVEO_APPLICATION_STAGE_ID", "JOVEO_APPLICATION_STAGE_APPLICATION_ID",
  "JOVEO_APPLICATION_STAGE_CUSTOMER_ID", "ATS_APPLICATION_STAGE_JOB_ID",
  "ATS_APPLICATION_STAGE_CANDIDATE_ID", "ATS_APPLICATION_STAGE_APPLICATION_ID",
  "ATS_APPLICATION_STAGE_ID", "ATS_APPLICATION_STAGE_NAME",
  "ATS_APPLICATION_STAGE_CREATED_DATE", "ATS_APPLICATION_STAGE_LAST_UPDATED_DATE",
  "ATS_APPLICATION_STAGE_INSERTED_AT", "ATS_APPLICATION_STAGE_UPDATED_AT",
  "ATS_APPLICATION_STAGE_CUSTOM_FIELDS", "ATS_APPLICATION_STAGE_AUDIT"
]
```

## Data Model Rules (Validation)
```json
"dataModelRules": [
  {
    "type": "BooleanExpressionRule",
    "jsonataExpression": "$exists(inputData.candidate.firstName) and inputData.candidate.firstName != null"
  },
  {
    "type": "BooleanExpressionRule",
    "jsonataExpression": "$count($$) > 0"
  }
]
```

## Response Handlers
```json
"responseHandlers": [
  {
    "statusCode": 200,
    "bodyRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "$exists(id)"}],
    "jsonataConvertorExpression": "{ \"jobId\": id }"
  },
  {
    "statusCode": 0,
    "bodyRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "true"}],
    "jsonataConvertorExpression": "{ \"errorMessage\": \"Integration not executed\" }"
  }
]
```

## Integration Dependencies (Looping Pattern)
```json
"integrationDependency": {
  "dependentIntegrationId": "cornerstone-get-applications-demo",
  "dependencyFields": [
    {
      "type": "RestApiIntegrationField",
      "targetField": "CurrentStatus",
      "jsonataExpression": ["New Submission", "In Review", "Phone Screening", "Interview", "Background Check", "Offer Letter", "Closed", "Hired"],
      "restApiIntegrationContext": "API_PATH"
    }
  ],
  "jsonDataType": "ARRAY_OF_PRIMITIVES",
  "queryType": "SINGLE_ENTITY"
}
```

## File Upload
```json
"requestPayload": {
  "requestBody": "{\"filename\":\"${fileName}\",\"content\":\"${content}\",\"content_type\":\"${contentType}\"}",
  "requestBodyConverter": []
}
```

## Date Parsing Patterns

### Robust Date Parsing (MM/dd/yyyy to ISO)
```jsonata
$date != null and $date != "" and $date != "Incomplete" and $count($split($date, "/")) = 3 and $split($date, "/")[1] != "" and $split($date, "/")[2] != "" and $split($date, "/")[3] != "" and $number($split($date, "/")[1]) > 0 and $number($split($date, "/")[1]) <= 12 and $number($split($date, "/")[2]) > 0 and $number($split($date, "/")[2]) <= 31 and $number($split($date, "/")[3]) > 1900 ? $fromMillis($toMillis($split($date, "/")[3] & "-" & ($number($split($date, "/")[1]) < 10 ? "0" & $split($date, "/")[1] : $split($date, "/")[1]) & "-" & ($number($split($date, "/")[2]) < 10 ? "0" & $split($date, "/")[2] : $split($date, "/")[2]) & "T00:00:00Z")) : null
```

### Timezone Offset Removal
```jsonata
$replace($date, /\\+\\d{2}:\\d{2}$/, "")
```

## Testing Requirements
- Test API endpoints with curl before implementation
- Validate JSONata expressions on try.jsonata.org
- Check target field compatibility
- Test pagination and date ranges
- Verify authentication with real credentials
- Test error handling scenarios

## Security Rules
- Never hardcode credentials
- Use template variables: `{{api_key}}`, `{{access_token}}`
- Validate input data
- Test authentication thoroughly

## Common Patterns

### ReadApiIntegration Template
```json
{
  "type": "ReadApiIntegration",
  "integrationId": "ats-get-jobs",
  "responseConfig": {
    "responseType": "ARRAY_OF_ENTITIES",
    "jsonataExpression": "$.d.results"
  },
  "dataModelRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "$count($$) > 0"}],
  "dataModelTarget": {
    "dataModelJsonataExpression": "$map($$, function($job) { ... })",
    "targetFields": ["JOVEO_JOB_ID", "ATS_JOB_ID"],
    "targetOperation": "UPSERT"
  },
  "method": "GET",
  "authTypes": ["API_KEY"],
  "apiPath": "/api/jobs",
  "headers": {"X-API-KEY": "{{api_key}}", "Content-Type": "application/json"},
  "queryParams": {"page": "${page}", "size": "100"},
  "paginationConfig": {"type": "PageConfig", "pageSize": 100},
  "dateRangeConfig": {
    "startDateTimeKey": "lastModifiedSince",
    "endDateTimeKey": "lastModifiedBefore",
    "dateTimeFormat": "yyyy-MM-dd'T'HH:mm:ss"
  }
}
```

### WriteApiIntegration Template
```json
{
  "type": "WriteApiIntegration",
  "integrationId": "ats-create-application",
  "responseConfig": {"responseType": "SINGLE_ENTITY", "jsonataExpression": "$"},
  "dataModelRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "$exists(inputData.candidate.firstName)"}],
  "method": "POST",
  "authTypes": ["API_KEY"],
  "apiPath": "/api/applications",
  "headers": {"X-API-KEY": "{{api_key}}", "Content-Type": "application/json"},
  "requestPayload": {"requestBody": "{ ... }", "requestBodyConverter": []},
  "responseHandlers": [
    {"statusCode": 201, "bodyRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "$exists(id)"}], "jsonataConvertorExpression": "{ \"applicationId\": id }"}
  ]
}
```

### Demo Integration Pattern (for Looping)
```json
{
  "type": "ReadApiIntegration",
  "integrationId": "ats-get-applications-demo",
  "responseConfig": {
    "responseType": "SINGLE_ENTITY",
    "jsonataExpression": "$"
  },
  "dataModelRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "true"}],
  "dataModelTarget": null,
  "integrationDependency": null,
  "failSilently": true,
  "method": "GET",
  "authTypes": ["API_KEY"],
  "apiPath": "/api/jobs",
  "headers": {"X-API-KEY": "{{api_key}}", "Content-Type": "application/json"},
  "queryParams": {"PageSize": 1},
  "executionEligibilityRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "true"}]
}
```

## Troubleshooting
- **JSONata errors**: Test on try.jsonata.org
- **Target field errors**: Check enum compatibility
- **Auth errors**: Verify API key format and OAuth2 scopes
- **Pagination issues**: Check pagination config and hasMoreDataJsonataExpression
- **Date errors**: Use robust date parsing patterns
- **UUID errors**: Use `$uuid()` for UUID generation
- **Looping errors**: Verify dependency fields and restApiIntegrationContext

## Reference Examples
- [cornerstone_data_model_integrations.json](mdc:ats_integrations/cornerstone_data_model_integrations.json) - Complete integration with looping
- [SAP_data_model_integrations.json](mdc:ats_integrations/SAP_data_model_integrations.json) - Complex response handling
- [pinpoint-new_data_model_integrations.json](mdc:ats_integrations/pinpoint-new_data_model_integrations.json) - Simple API_KEY integration
- [apploi_data_model_integrations.json](mdc:ats_integrations/apploi_data_model_integrations.json) - BASIC authentication
# ATS Integration Development Rules

## File Structure
- Store all integrations in `ats_integrations/` directory
- Naming: `{ats_name}_data_model_integrations.json`
- Integration IDs: `{ats}-{action}-{entity}` (e.g., `cornerstone-get-applications`)

## Data Models
- **JOB**: Job posting data with locations, departments, recruiters
- **CANDIDATE**: Candidate profile data with addresses, phone numbers
- **APPLICATION**: Job application data with status tracking
- **APPLICATION_STAGE**: Application workflow stages with audit trails
- **JOB_QUESTION**: Job-specific questions, forms, and screening questions

## Integration Types
- **REST_API**: Read operations from ATS (GET requests)
- **WRITE_REST_API**: Write operations to ATS (POST/PUT/PATCH)
- **WEBHOOK**: Real-time event processing
- **REST_API_RESPONSE_HANDLER**: Response processing for complex workflows
- **WRITE_API_RESPONSE_HANDLER**: Write operation response handling

## Authentication
- Support: `["API_KEY"]`, `["OAUTH_2"]`, `["BASIC"]`, `["SECURED_OAUTH2"]`, `["AWS Signature Version 4 (SigV4)"]`
- Use `{{api_key}}`, `{{access_token}}`, `{{client_id}}`, `{{client_secret}}` templates
- Include: `Content-Type: application/json`, `Accept: application/json`

## JSONata Rules
- Use `$map()` for array transformations
- Use `$filter()` for conditional processing
- Use `$exists()` for null checks and field validation
- Use `$now()` for timestamps
- Use `$replace()` for date formatting and timezone removal
- Use `$count()` for array length checks
- Use `$merge()` for combining objects
- Use `$reduce()` for array aggregation
- Use `$lookup()` for property access
- Use `$split()` for string parsing
- Use `$number()` for type conversion
- Use `$fromMillis()` and `$toMillis()` for date conversion
- Use `$uuid()` for UUID generation

## Response Types
- **ARRAY_OF_ENTITIES**: Bulk data fetching with pagination
- **SINGLE_ENTITY**: Single record operations

## Pagination & Date Range
```json
"paginationConfig": {
  "type": "PageConfig",
  "pageSize": 100,
  "pageNumberKey": "page",
  "hasMoreDataJsonataExpression": "$exists($.d.__next)"
},
"dateRangeConfig": {
  "startDateTimeKey": "lastModifiedSince",
  "endDateTimeKey": "lastModifiedBefore",
  "dateTimeFormat": "yyyy-MM-dd'T'HH:mm:ss"
}
```

## Target Fields (Always Required)

### Job Target Fields
```json
"targetFields": [
  "JOVEO_JOB_ID", "JOVEO_JOB_CUSTOMER_ID", "ATS_JOB_ID",
  "ATS_JOB_REF_NUMBER", "ATS_JOB_TITLE", "ATS_JOB_DESCRIPTION",
  "ATS_JOB_URL", "ATS_JOB_STATUS", "ATS_JOB_DEPARTMENT",
  "ATS_JOB_COMPANY", "ATS_JOB_LOCATIONS", "ATS_JOB_CREATED_DATE",
  "ATS_JOB_LAST_UPDATED_DATE", "ATS_JOB_START_DATE", "ATS_JOB_END_DATE",
  "ATS_JOB_INSERTED_AT", "ATS_JOB_UPDATED_AT", "ATS_JOB_IS_DELETED",
  "ATS_JOB_CUSTOM_FIELDS", "ATS_JOB_AUDIT", "ATS_JOB_POSITION_CATEGORY",
  "ATS_JOB_POSITION_LEVEL", "ATS_JOB_REMOTE_TYPE", "ATS_JOB_RECRUITERS",
  "ATS_JOB_HIRING_MANAGERS"
]
```

### Candidate Target Fields
```json
"targetFields": [
  "JOVEO_CANDIDATE_ID", "JOVEO_CANDIDATE_CUSTOMER_ID", "ATS_CANDIDATE_ID",
  "ATS_CANDIDATE_FIRST_NAME", "ATS_CANDIDATE_LAST_NAME", "ATS_CANDIDATE_EMAIL",
  "ATS_CANDIDATE_PHONE_NUMBERS", "ATS_CANDIDATE_ADDRESS", "ATS_CANDIDATE_CREATED_DATE",
  "ATS_CANDIDATE_LAST_UPDATED_DATE", "ATS_CANDIDATE_INSERTED_AT",
  "ATS_CANDIDATE_UPDATED_AT", "ATS_CANDIDATE_IS_DELETED",
  "ATS_CANDIDATE_CUSTOM_FIELDS", "ATS_CANDIDATE_AUDIT"
]
```

### Application Target Fields
```json
"targetFields": [
  "JOVEO_APPLICATION_ID", "JOVEO_APPLICATION_CUSTOMER_ID", "ATS_APPLICATION_ID",
  "ATS_APPLICATION_CANDIDATE_ID", "ATS_APPLICATION_JOB_ID", "ATS_APPLICATION_STATUS",
  "ATS_APPLICATION_APPLIED_DATE", "ATS_APPLICATION_CREATED_DATE",
  "ATS_APPLICATION_LAST_UPDATED_DATE", "ATS_APPLICATION_INSERTED_AT",
  "ATS_APPLICATION_UPDATED_AT", "ATS_APPLICATION_IS_DELETED",
  "ATS_APPLICATION_CUSTOM_FIELDS", "ATS_APPLICATION_AUDIT", "ATS_APPLICATION_SOURCE",
  "ATS_APPLICATION_ANSWERS", "ATS_APPLICATION_TAGS"
]
```

### Application Stage Target Fields
```json
"targetFields": [
  "JOVEO_APPLICATION_STAGE_ID", "JOVEO_APPLICATION_STAGE_APPLICATION_ID",
  "JOVEO_APPLICATION_STAGE_CUSTOMER_ID", "ATS_APPLICATION_STAGE_JOB_ID",
  "ATS_APPLICATION_STAGE_CANDIDATE_ID", "ATS_APPLICATION_STAGE_APPLICATION_ID",
  "ATS_APPLICATION_STAGE_ID", "ATS_APPLICATION_STAGE_NAME",
  "ATS_APPLICATION_STAGE_CREATED_DATE", "ATS_APPLICATION_STAGE_LAST_UPDATED_DATE",
  "ATS_APPLICATION_STAGE_INSERTED_AT", "ATS_APPLICATION_STAGE_UPDATED_AT",
  "ATS_APPLICATION_STAGE_CUSTOM_FIELDS", "ATS_APPLICATION_STAGE_AUDIT"
]
```

## Data Model Rules (Validation)
```json
"dataModelRules": [
  {
    "type": "BooleanExpressionRule",
    "jsonataExpression": "$exists(inputData.candidate.firstName) and inputData.candidate.firstName != null"
  },
  {
    "type": "BooleanExpressionRule",
    "jsonataExpression": "$count($$) > 0"
  }
]
```

## Response Handlers
```json
"responseHandlers": [
  {
    "statusCode": 200,
    "bodyRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "$exists(id)"}],
    "jsonataConvertorExpression": "{ \"jobId\": id }"
  },
  {
    "statusCode": 0,
    "bodyRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "true"}],
    "jsonataConvertorExpression": "{ \"errorMessage\": \"Integration not executed\" }"
  }
]
```

## Integration Dependencies (Looping Pattern)
```json
"integrationDependency": {
  "dependentIntegrationId": "cornerstone-get-applications-demo",
  "dependencyFields": [
    {
      "type": "RestApiIntegrationField",
      "targetField": "CurrentStatus",
      "jsonataExpression": ["New Submission", "In Review", "Phone Screening", "Interview", "Background Check", "Offer Letter", "Closed", "Hired"],
      "restApiIntegrationContext": "API_PATH"
    }
  ],
  "jsonDataType": "ARRAY_OF_PRIMITIVES",
  "queryType": "SINGLE_ENTITY"
}
```

## File Upload
```json
"requestPayload": {
  "requestBody": "{\"filename\":\"${fileName}\",\"content\":\"${content}\",\"content_type\":\"${contentType}\"}",
  "requestBodyConverter": []
}
```

## Date Parsing Patterns

### Robust Date Parsing (MM/dd/yyyy to ISO)
```jsonata
$date != null and $date != "" and $date != "Incomplete" and $count($split($date, "/")) = 3 and $split($date, "/")[1] != "" and $split($date, "/")[2] != "" and $split($date, "/")[3] != "" and $number($split($date, "/")[1]) > 0 and $number($split($date, "/")[1]) <= 12 and $number($split($date, "/")[2]) > 0 and $number($split($date, "/")[2]) <= 31 and $number($split($date, "/")[3]) > 1900 ? $fromMillis($toMillis($split($date, "/")[3] & "-" & ($number($split($date, "/")[1]) < 10 ? "0" & $split($date, "/")[1] : $split($date, "/")[1]) & "-" & ($number($split($date, "/")[2]) < 10 ? "0" & $split($date, "/")[2] : $split($date, "/")[2]) & "T00:00:00Z")) : null
```

### Timezone Offset Removal
```jsonata
$replace($date, /\\+\\d{2}:\\d{2}$/, "")
```

## Testing Requirements
- Test API endpoints with curl before implementation
- Validate JSONata expressions on try.jsonata.org
- Check target field compatibility
- Test pagination and date ranges
- Verify authentication with real credentials
- Test error handling scenarios

## Security Rules
- Never hardcode credentials
- Use template variables: `{{api_key}}`, `{{access_token}}`
- Validate input data
- Test authentication thoroughly

## Common Patterns

### ReadApiIntegration Template
```json
{
  "type": "ReadApiIntegration",
  "integrationId": "ats-get-jobs",
  "responseConfig": {
    "responseType": "ARRAY_OF_ENTITIES",
    "jsonataExpression": "$.d.results"
  },
  "dataModelRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "$count($$) > 0"}],
  "dataModelTarget": {
    "dataModelJsonataExpression": "$map($$, function($job) { ... })",
    "targetFields": ["JOVEO_JOB_ID", "ATS_JOB_ID"],
    "targetOperation": "UPSERT"
  },
  "method": "GET",
  "authTypes": ["API_KEY"],
  "apiPath": "/api/jobs",
  "headers": {"X-API-KEY": "{{api_key}}", "Content-Type": "application/json"},
  "queryParams": {"page": "${page}", "size": "100"},
  "paginationConfig": {"type": "PageConfig", "pageSize": 100},
  "dateRangeConfig": {
    "startDateTimeKey": "lastModifiedSince",
    "endDateTimeKey": "lastModifiedBefore",
    "dateTimeFormat": "yyyy-MM-dd'T'HH:mm:ss"
  }
}
```

### WriteApiIntegration Template
```json
{
  "type": "WriteApiIntegration",
  "integrationId": "ats-create-application",
  "responseConfig": {"responseType": "SINGLE_ENTITY", "jsonataExpression": "$"},
  "dataModelRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "$exists(inputData.candidate.firstName)"}],
  "method": "POST",
  "authTypes": ["API_KEY"],
  "apiPath": "/api/applications",
  "headers": {"X-API-KEY": "{{api_key}}", "Content-Type": "application/json"},
  "requestPayload": {"requestBody": "{ ... }", "requestBodyConverter": []},
  "responseHandlers": [
    {"statusCode": 201, "bodyRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "$exists(id)"}], "jsonataConvertorExpression": "{ \"applicationId\": id }"}
  ]
}
```

### Demo Integration Pattern (for Looping)
```json
{
  "type": "ReadApiIntegration",
  "integrationId": "ats-get-applications-demo",
  "responseConfig": {
    "responseType": "SINGLE_ENTITY",
    "jsonataExpression": "$"
  },
  "dataModelRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "true"}],
  "dataModelTarget": null,
  "integrationDependency": null,
  "failSilently": true,
  "method": "GET",
  "authTypes": ["API_KEY"],
  "apiPath": "/api/jobs",
  "headers": {"X-API-KEY": "{{api_key}}", "Content-Type": "application/json"},
  "queryParams": {"PageSize": 1},
  "executionEligibilityRules": [{"type": "BooleanExpressionRule", "jsonataExpression": "true"}]
}
```

## Troubleshooting
- **JSONata errors**: Test on try.jsonata.org
- **Target field errors**: Check enum compatibility
- **Auth errors**: Verify API key format and OAuth2 scopes
- **Pagination issues**: Check pagination config and hasMoreDataJsonataExpression
- **Date errors**: Use robust date parsing patterns
- **UUID errors**: Use `$uuid()` for UUID generation
- **Looping errors**: Verify dependency fields and restApiIntegrationContext

## Reference Examples
- [cornerstone_data_model_integrations.json](mdc:ats_integrations/cornerstone_data_model_integrations.json) - Complete integration with looping
- [SAP_data_model_integrations.json](mdc:ats_integrations/SAP_data_model_integrations.json) - Complex response handling
- [pinpoint-new_data_model_integrations.json](mdc:ats_integrations/pinpoint-new_data_model_integrations.json) - Simple API_KEY integration
- [apploi_data_model_integrations.json](mdc:ats_integrations/apploi_data_model_integrations.json) - BASIC authentication
