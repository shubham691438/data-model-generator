{
  "status": "success",
  "ats_name": "SmartRecruiters",
  "data": [
    {
      "dataModel": "APPLICATION",
      "integrationType": "WRITE_REST_API",
      "integrations": [
        {
          "type": "WriteApiIntegration",
          "integrationId": "sr-create-application-start-chain",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(inputData.candidate.firstName) and inputData.candidate.firstName != null and $exists(inputData.candidate.lastName) and inputData.candidate.lastName != null and $exists(inputData.candidate.email) and inputData.candidate.email != null and $exists(inputData.application.atsJobId) and inputData.application.atsJobId != null"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false,
          "method": "POST",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/v1/candidates",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "requestPayload": {
            "requestBody": "",
            "requestBodyConverter": []
          },
          "responseHandlers": [
            {
              "statusCode": 0,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "true"
                }
              ],
              "jsonataConvertorExpression": "{\"errorMessage\": \"Integration not executed because this is dummy integration to support dependency fields for next integration.\"}"
            }
          ],
          "headersInResponse": false,
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "false"
            }
          ]
        },
        {
          "type": "WriteApiIntegration",
          "integrationId": "sr-get-posting",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": {
            "dependentIntegrationId": "sr-create-application-start-chain",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "jobAdId",
                "jsonataExpression": "inputData.application.atsJobId",
                "restApiIntegrationContext": "API_PATH"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/v1/companies/${companyIdentity}/postings/${jobAdId}",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "requestPayload": null,
          "responseHandlers": [
            {
              "statusCode": 200,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "$exists(uuid) and uuid != null"
                }
              ],
              "jsonataConvertorExpression": "$"
            }
          ],
          "headersInResponse": false,
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(inputData.application.atsJobId)"
            }
          ]
        },
        {
          "type": "WriteApiIntegration",
          "integrationId": "sr-create-application",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(inputData.candidate.firstName) and inputData.candidate.firstName != null and $exists(inputData.candidate.lastName) and inputData.candidate.lastName != null and $exists(inputData.candidate.email) and inputData.candidate.email != null and $exists(inputData.application.atsJobId) and inputData.application.atsJobId != null"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": {
            "dependentIntegrationId": "sr-get-posting",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "postingId",
                "jsonataExpression": "response.uuid",
                "restApiIntegrationContext": "API_PATH"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "atsJobId",
                "jsonataExpression": "inputData.application.atsJobId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": false,
          "method": "POST",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/postings/${postingId}/candidates",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "requestPayload": {
            "requestBody": "$merge([{\n    \"firstName\": inputData.candidate.firstName,\n    \"lastName\": inputData.candidate.lastName,\n    \"email\": inputData.candidate.email,\n    \"phoneNumber\": (inputData.candidate.phoneNumbers = null or $count(inputData.candidate.phoneNumbers)=0)?\"\":inputData.candidate.phoneNumbers[\n        0\n    ].phoneNumber,\n    \"location\": inputData.candidate.address.city!=null ? {\n        \"city\": inputData.candidate.address.city\n    }: null,\n    \"resume\": inputData.application.attachment=null ? null : {\n        \"fileName\": inputData.application.attachment.attachmentFileName,\n        \"mimeType\": inputData.application.attachment.attachmentContentType,\n        \"fileContent\": inputData.application.attachment.attachmentContent\n    },\n    \"conditionalsIncluded\": true,\n    \"answers\": (\n    $isItQuestion := function($id) {\n        $contains($id,\n        \"_Question_\")\n    };\n\n    $isItQuestionSet := function($id) {\n        $contains($id,\n        \"_QuestionSet\")\n    };\n\n    $transformSingleQnAnsToSRContract := function($questionId, $fieldAnswer) {\n        {\n            $split($questionId,\n            \"_Question_\")[\n                1\n            ] : $type($fieldAnswer) = \"array\" ? $fieldAnswer : [$fieldAnswer\n            ]\n        }\n    };\n\n    $singleQuestionAnswer := function($questionId, $fieldAnswer) {\n        {\n            \"fields\": $transformSingleQnAnsToSRContract($questionId, $fieldAnswer)\n        }\n    };\n\n    $transformFieldAnswerToSRContract := function($fieldAnswer) {\n        $type($fieldAnswer) = 'array' ? $fieldAnswer : [$fieldAnswer\n        ]\n    };\n\n    $transformQuestionSetAnsToSRContract := function($fieldAnswer) {\n        (\n            $fieldIds := $keys($fieldAnswer);\n            $answers := [$map($fieldIds, function($fieldId) {\n                {\n                    $fieldId: $transformFieldAnswerToSRContract($lookup($fieldAnswer, $fieldId))\n                }\n            })];\n\n            $merge($answers)\n        )\n    };\n\n    $questionSetAnswers := function($fieldAnswers) {\n        (\n            $fieldDataType := $type($fieldAnswers);\n            $arrayFieldAnswers := $fieldDataType = 'array' ? $fieldAnswers : [$fieldAnswers];\n\n            [$map($arrayFieldAnswers, function($fieldAnswer) {\n             {\n                 \"fields\": $transformQuestionSetAnsToSRContract($fieldAnswer)\n             }   \n            })]\n        )\n    };\n\n    $screeningQuestions := inputData.application.customFields.questionAnswers;\n    $questionIds := $screeningQuestions = null ? [] : [$keys($screeningQuestions.additionalFields)];\n\n    $getQuestionAnswers := function($questionId) {\n        (\n            $fieldAnswers := $lookup($screeningQuestions.additionalFields, $questionId);\n            $isItQuestion($questionId) = true ? [$singleQuestionAnswer($questionId, $fieldAnswers)] : $isItQuestionSet($questionId) = true ? $questionSetAnswers($fieldAnswers) : {}\n        )\n    };\n    \n    $getQuestionId := function($id) {\n        $isItQuestion($id) = true ? $split($id,\n        \"_Question_\")[\n            0\n        ] : $isItQuestionSet($id) = true ?  $split($id,\n        \"_QuestionSet\")[\n            0\n        ] : \"\"\n    };\n\n     $filteredQnIds := $filter($questionIds, function($questionId){\n        $isItQuestion($questionId) or $isItQuestionSet($questionId)\n    });\n\n    $count($filteredQnIds) = 0 ? null : [$map($filteredQnIds, function($id) {\n            {\n                \"id\": $getQuestionId($id),\n                \"records\": $getQuestionAnswers($id)\n            }\n        })\n    ]\n),\n\"consentDecisions\": (\n    $isItConsent := function($id) {\n        $contains($id,\n        \"consentQuestion_\")\n    };\n\n    $getConsentKey := function($id) {\n        $isItConsent($id) = true ? $split($id,\n        \"consentQuestion_\")[\n            1\n        ] : null\n    };\n\n    $fetchConsentValue := function($id) {\n        (\n            $consentVal := $lookup($screeningQuestions.additionalFields, $id);\n            $consentVal = \"true\" ? true : false\n        )\n    };\n\n    $screeningQuestions := inputData.application.customFields.questionAnswers;\n    $questionIds := $screeningQuestions = null ? [] : [$keys($screeningQuestions.additionalFields)];\n    $consentQuestions := $filter($questionIds, function($questionId){\n        $isItConsent($questionId)\n    });\n\n    $consents := $count($consentQuestions) = 0 ? null : [$map($consentQuestions, function($id) {\n            {\n                $getConsentKey($id):  $fetchConsentValue($id)\n            }\n        })\n    ];\n\n    $consents = null ? null : $merge($consents)\n),\n\"sourceDetails\": {\n        \"sourceTypeId\": \"ORGANIC\", \n        \"sourceSubTypeId\" : \"SMARTRECRUITERS\",\n        \"sourceId\": $not($exists(inputData.application.customFields.source)) ? '6732660b-8def-40da-8bea-fe3fb1d47aef' : inputData.application.customFields.source='CONVERSATION_APPLY_WEB' ? '6732660b-8def-40da-8bea-fe3fb1d47aef' : inputData.application.customFields.source='CONVERSATION_APPLY_WHATSAPP' ? '9d71a09a-4d42-4cec-93b4-9cf85e025485' : inputData.application.customFields.source='CONVERSATION_APPLY_SMS' ? '158f3b3a-32b7-4b30-8ca3-9472b8a68a2a' : '6732660b-8def-40da-8bea-fe3fb1d47aef' \n  }\n},\n(\n    ($exists(inputData.candidate.education) and inputData.candidate.education!=null and $count(inputData.candidate.education) > 0) ? {\n        \"education\": [$map(inputData.candidate.education, function($educationInfo) {\n            {\n                \"institution\": $educationInfo.institution,\n                \"degree\": $educationInfo.degree,\n                \"major\": $educationInfo.major,\n                \"current\": $educationInfo.current,\n                \"location\": $educationInfo.city & \",\" & $educationInfo.state & \",\" & $educationInfo.country,\n                \"startDate\": $educationInfo.startDate!=null ? $educationInfo.startDate.$substringBefore(\"T\") : null,\n                \"endDate\": $educationInfo.endDate!=null ? $educationInfo.endDate.$substringBefore(\"T\") : null,\n                \"description\": $educationInfo.description\n            }    \n        })]\n    } : {}\n),\n(\n    ($exists(inputData.candidate.workExperience) and inputData.candidate.workExperience!=null and $count(inputData.candidate.workExperience) > 0) ? {\n        \"experience\": [$map(inputData.candidate.workExperience, function($experienceInfo) {\n            {\n                \"title\": $experienceInfo.title,\n                \"company\": $experienceInfo.company,\n                \"current\": $experienceInfo.current,\n                \"location\": $experienceInfo.city & \",\" & $experienceInfo.state & \",\" & $experienceInfo.country,\n                \"startDate\": $experienceInfo.startDate!=null ? $experienceInfo.startDate.$substringBefore(\"T\") : null,\n                \"endDate\": $experienceInfo.endDate!=null ? $experienceInfo.endDate.$substringBefore(\"T\") : null,\n                \"description\": $experienceInfo.description\n            }    \n        })]\n    } : {}\n),\n(\n    $exists(inputData.application.customFields.questionAnswers.additionalFields.messageToHiringManager.workingInterest) and inputData.application.customFields.questionAnswers.additionalFields.messageToHiringManager.workingInterest!=null ?\n    {\"messageToHiringManager\": inputData.application.customFields.questionAnswers.additionalFields.messageToHiringManager.workingInterest} : {}\n)\n])",
            "requestBodyConverter": []
          },
          "responseHandlers": [
            {
              "statusCode": 200,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "$exists(id) and id != null"
                },
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "$exists(applicationId) and applicationId != null"
                }
              ],
              "jsonataConvertorExpression": "{ \"jobId\": \"${atsJobId}\", \"candidateId\": id, \"applicationId\": applicationId}"
            }
          ],
          "headersInResponse": false,
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(response.uuid)"
            }
          ]
        }
      ]
    },
    {
      "dataModel": "APPLICATION_STAGE",
      "integrationType": "WEBHOOK",
      "integrations": [
        {
          "type": "WebhookIntegration",
          "integrationId": "smart-recruiters-application-stage-change-event",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(job_id)"
            },
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(candidate_id)"
            },
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(application_id)"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "smart-recruiters-jobs-api",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": null,
            "resPassingJsonataExpression": "{\n    \"atsJobId\":refNumber,\n    \"jobId\":\"${jobId}\",\n    \"jobApplicationId\":\"${jobApplicationId}\",\n    \"candidateId\":\"${candidateId}\"\n}"
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": {
            "dependentIntegrationId": "smart-recruiters-application-stage-change-event",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "jobId",
                "jsonataExpression": "job_id",
                "restApiIntegrationContext": "API_PATH"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "jobApplicationId",
                "jsonataExpression": "application_id",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "candidateId",
                "jsonataExpression": "candidate_id",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "jobId",
                "jsonataExpression": "job_id",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2"
          ],
          "apiPath": "/jobs/${jobId}",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": {
            "requestBody": {}
          },
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": []
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "smart-recruiters-job-applications-api",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": null,
            "resPassingJsonataExpression": "{\n    \"atsJobId\":\"${atsJobId}\",\n    \"atsCandidateId\":\"${candidateId}\",\"jobId\":\"${jobId}\",\n    \"atsApplicationId\":\"${jobApplicationId}\",\n    \"stageId\":$join([subStatus!=null?subStatus:status, createDate], \"_\"),\n    \"stageName\":status,\n    \"createdDate\":$fromMillis($toMillis(createDate)),\n    \"lastUpdatedDate\":$fromMillis($toMillis(createDate)),\n    \"sourceIdentifier\":sourceIdentifier\n}"
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": {
            "dependentIntegrationId": "smart-recruiters-jobs-api",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "jobApplicationId",
                "jsonataExpression": "jobApplicationId",
                "restApiIntegrationContext": "API_PATH"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "jobApplicationId",
                "jsonataExpression": "jobApplicationId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "candidateId",
                "jsonataExpression": "candidateId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "atsJobId",
                "jsonataExpression": "atsJobId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "jobId",
                "jsonataExpression": "jobId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2"
          ],
          "apiPath": "/job-applications-api/v202112/job-applications/${jobApplicationId}",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": {
            "requestBody": {}
          },
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": []
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "smart-recruiters-job-applications-status-api",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "content",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": {
            "dataModelJsonataExpression": "[\n    {\n        \"atsJobId\": \"${atsJobId}\",\n        \"atsCandidateId\": \"${atsCandidateId}\",\n        \"atsApplicationId\": \"${atsApplicationId}\",\n        \"stageId\": \"${stageId}\",\n        \"stageName\": \"${stageName}\",\n        \"createdDate\": \"${createdDate}\",\n        \"lastUpdatedDate\": \"${lastUpdatedDate}\",\n        \"appliedAt\": $exists($[status = \"NEW\"]) ? $fromMillis($toMillis($[status = \"NEW\"][0].changedOn)) : null,\n        \"insertedAt\": $now(),\n        \"updatedAt\": $now(),\n        \"customFields\": {\n            \"sourceIdentifier\": \"${sourceIdentifier}\",\n            \"jobId\":\"${jobId}\"\n        }\n    }\n]",
            "targetFields": [
              "JOVEO_APPLICATION_STAGE_ID",
              "JOVEO_APPLICATION_STAGE_APPLICATION_ID",
              "JOVEO_APPLICATION_STAGE_CUSTOMER_ID",
              "ATS_APPLICATION_STAGE_CANDIDATE_ID",
              "ATS_APPLICATION_STAGE_APPLICATION_ID",
              "ATS_APPLICATION_STAGE_ID",
              "ATS_APPLICATION_STAGE_NAME",
              "ATS_APPLICATION_STAGE_CREATED_DATE",
              "ATS_APPLICATION_STAGE_LAST_UPDATED_DATE",
              "ATS_APPLICATION_STAGE_INSERTED_AT",
              "ATS_APPLICATION_STAGE_UPDATED_AT",
              "ATS_APPLICATION_STAGE_CUSTOM_FIELDS",
              "ATS_APPLICATION_STAGE_JOB_ID",
              "ATS_APPLICATION_STAGE_AUDIT",
              "ATS_APPLICATION_APPLIED_DATE"
            ],
            "targetOperation": "UPSERT"
          },
          "integrationDependency": {
            "dependentIntegrationId": "smart-recruiters-job-applications-api",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "jobId",
                "jsonataExpression": "jobId",
                "restApiIntegrationContext": "API_PATH"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "candidateId",
                "jsonataExpression": "atsCandidateId",
                "restApiIntegrationContext": "API_PATH"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "atsApplicationId",
                "jsonataExpression": "atsApplicationId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "atsJobId",
                "jsonataExpression": "atsJobId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "atsCandidateId",
                "jsonataExpression": "atsCandidateId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "stageId",
                "jsonataExpression": "stageId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "stageName",
                "jsonataExpression": "stageName",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "createdDate",
                "jsonataExpression": "createdDate",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "lastUpdatedDate",
                "jsonataExpression": "lastUpdatedDate",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "sourceIdentifier",
                "jsonataExpression": "sourceIdentifier",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "jobId",
                "jsonataExpression": "jobId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2"
          ],
          "apiPath": "/candidates/${candidateId}/jobs/${jobId}/status/history",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": {
            "requestBody": {}
          },
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": []
        }
      ]
    },
    {
      "dataModel": "JOB_QUESTION",
      "integrationType": "REST_API_RESPONSE_HANDLER",
      "integrations": [
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-posting-screening-questions-to-joveo-questions",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/postings/${postingId}/configuration",
          "headers": {},
          "queryParams": {
            "conditionalsIncluded": "true"
          },
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [
            {
              "statusCode": 0,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "true"
                }
              ],
              "jsonataConvertorExpression": "{\n    \"data\": {\"questions\": (\n    $inputType := function($input) { $input=\"INPUT_TEXT\" ? \"TEXT\": $input=\"TEXT\" ? \"TEXT\": $input=\"SINGLE_SELECT\" ? \"SELECT\": $input=\"MULTI_SELECT\" ? \"SELECT\": $input=\"RADIO\" ? \"RADIO\": $input=\"CHECKBOX\" ? \"CHECKBOX\":\n    $input=\"TEXTAREA\"? \"TEXT_AREA\": $input=\"INFORMATION\" ? \"LABEL\": \"UNKNOWN\"\n        };\n\n\n    $dependencyCriteriaObj := function($srQuestion, $conditionals, $isQuestionSet) {\n        (\n            $conditions := $filter($conditionals, function($condition) {\n                $exists($filter($condition.conditionalQuestions, function($v) { $v = $srQuestion.id\n                }))\n            });\n\n            $criterias := [$map($conditions, function($condition) {\n                    {\n                        \"field\": $isQuestionSet = true ? \"additionalFields.\" & $condition.parentQuestionId & \"_QuestionSet\" & \".\" & $condition.fieldId : \"additionalFields.\" & $condition.parentQuestionId & \"_Question_\" & $condition.fieldId,\n                        \"values\": $condition.valueIds[\n                            0\n                        ]\n                    }\n                })\n            ];\n\n            $count($criterias) =0 ? null : {\n                \"criteria\": $criterias,\n                \"operator\": \"ALL\",\n                \"defaultBehavior\": \"SHOW\"\n            }\n        )\n        };\n\n    $inputOptionListObj := function($srQuestionField) {\n            [$map(($srQuestionField.values=null or $count($srQuestionField.values)=0) ? [] : $srQuestionField.values, function($value) {\n                    {\n                        \"label\": $value.label,\n                        \"value\": $value.id\n                    }\n                })\n            ]\n        };\n\n    $isItMultiValQuestion := function($input) {\n        $input = \"MULTI_SELECT\" ? true : false\n        };\n\n    $inputValidationObj := function($srQuestionField) {\n        $srQuestionField.type = \"MULTI_SELECT\" ? {\n                \"maxSelections\": $count($srQuestionField.values)\n            } : null\n        };\n\n    $questionObj := function($srQuestion, $srQuestionField) {\n            {\n                \"type\": \"QUESTION\",\n                \"id\": $srQuestion.id,\n                \"label\": $srQuestion.label,\n                \"field\": \"additionalFields.\" & $srQuestion.id & \"_Question_\" & $srQuestionField.id,\n                \"inputType\": $inputType($srQuestionField.type),\n                \"isMultiValue\": $isItMultiValQuestion($srQuestionField.type),\n                \"properties\": {\n                    \"isMandatory\": $srQuestionField.required\n                },\n                \"inputOptionList\": $inputOptionListObj($srQuestionField),\n                \"inputValidation\": $inputValidationObj($srQuestionField),\n                \"dependencyCriteria\":  ($exists(sr_get_posting_screening_questions[0].settings) and $exists(sr_get_posting_screening_questions[0].settings.conditionals)) ? $dependencyCriteriaObj($srQuestion, sr_get_posting_screening_questions[0].settings.conditionals, false) : null\n            }\n        };\n\n    $questionObjOfSet := function($srQuestion, $srQuestionField) {\n            {\n                \"type\": \"QUESTION\",\n                \"id\": $srQuestion.id &  \".\" & $srQuestionField.id,\n                \"label\": $srQuestionField.label,\n                \"field\":  $srQuestionField.id,\n                \"inputType\": $inputType($srQuestionField.type),\n                \"isMultiValue\": $isItMultiValQuestion($srQuestionField.type),\n                \"properties\": {\n                    \"isMandatory\": $srQuestionField.required\n                },\n                \"inputOptionList\": $inputOptionListObj($srQuestionField),\n                \"inputValidation\": $inputValidationObj($srQuestionField)\n            }\n        };\n\n    $isQuestionSetMandatory := function($srQuestionFields) {\n        $count($filter($srQuestionFields, function($field){\n            $field.required\n        })) > 0\n    };\n\n    $questionsSetObj := function($srQuestion) {\n            {\n                \"type\": \"QUESTION_SET\",\n                \"id\": $srQuestion.id,\n                \"label\": $srQuestion.label,\n                \"field\": \"additionalFields.\" & $srQuestion.id & \"_QuestionSet\",\n                \"isMultiValue\": $srQuestion.repeatable,\n                \"questionEntities\": [\n                    [$map($srQuestion.fields = null ? [] : $srQuestion.fields, function($srQuestionField) {\n                    $questionObjOfSet($srQuestion, $srQuestionField)\n                        })\n                    ]\n                ],\n                \"properties\": {\n                    \"maxInstances\": $srQuestion.repeatable = true ? 10 : 1,\n                    \"isMandatory\": $srQuestion.fields = null ? false : $isQuestionSetMandatory($srQuestion.fields)\n                },\n                \"dependencyCriteria\":  ($exists(sr_get_posting_screening_questions[0].settings) and $exists(sr_get_posting_screening_questions[0].settings.conditionals)) ? $dependencyCriteriaObj($srQuestion, sr_get_posting_screening_questions[0].settings.conditionals, true) : null\n            }\n        };\n\n    $srQuestions := $ = null ? [] : (sr_get_posting_screening_questions[0].questions = null or $count(sr_get_posting_screening_questions[0].questions) = 0) ? [] : sr_get_posting_screening_questions[0].questions;\n\n    $screeningQuestionsArray := [$map($srQuestions, function($question) {\n        ($question.repeatable or ($count($question.fields) > 1)) ? $questionsSetObj($question) : $questionObj($question, $question.fields[\n                    0\n                ])\n            })\n        ];\n\n    $getPrivacyPolicyUrl := function() {\n        (\n            $privacyPolicies := sr_get_posting_screening_questions[0].privacyPolicies;\n\n            ($exists($privacyPolicies) = false or $privacyPolicies = null or $count($privacyPolicies) = 0) ? ''\n            : ($count([$privacyPolicies[orgName!='SmartRecruiters'].url]) > 0 ? [$privacyPolicies[orgName!='SmartRecruiters'].url][0]\n            : $privacyPolicies[0].url)\n        )\n    };\n\n    $consentQuestionObj := function($consent) {\n            {\n                \"type\": \"QUESTION\",\n                \"id\": $consent.scope,\n                \"label\": $getPrivacyPolicyUrl(),\n                \"field\": \"additionalFields.\" & \"consentQuestion_\" & $consent.scope,\n                \"inputType\": $inputType(\"CHECKBOX\"),\n                \"isMultiValue\": false,\n                \"properties\": {\n                    \"isMandatory\": $consent.required\n                },\n                \"inputOptionList\": [\n                    {\n                        \"label\": $consent.label,\n                        \"value\": \"true\"\n                    }\n                ]\n            }\n        };\n\n    $consentsQuestionsArray := [$map(sr_get_posting_screening_questions[0].consentSettings.scopes, function($scope) {\n        $consentQuestionObj($scope)\n    })];\n\n    $builUcpQuestions := function($questions) {\n        (\n            $firstName := ($exists($questions.fieldSets.firstAndLastName) and $questions.fieldSets.firstAndLastName.visible=true) ? $eval(\"{\\n    \\\"id\\\": \\\"f1288302-354e-4eca-b4e8-907523585505\\\",\\n    \\\"label\\\": \\\"First Name\\\",\\n    \\\"isMultiValue\\\": false,\\n    \\\"field\\\": \\\"firstName\\\",\\n    \\\"inputType\\\": \\\"TEXT\\\",\\n    \\\"properties\\\": {\\n        \\\"placeholder\\\": null,\\n        \\\"minInstances\\\": 1,\\n        \\\"maxInstances\\\": 1,\\n        \\\"isMandatory\\\": $questions.fieldSets.firstAndLastName.required,\\n        \\\"comment\\\": null,\\n        \\\"searchCapability\\\": false,\\n        \\\"searchable\\\": null,\\n        \\\"readOnly\\\": null,\\n        \\\"allowManual\\\": null,\\n        \\\"format\\\": null,\\n        \\\"maxSize\\\": 0,\\n        \\\"maxFiles\\\": null,\\n        \\\"rows\\\": null,\\n        \\\"fullWidth\\\": null,\\n        \\\"mimeTypes\\\": null\\n    },\\n    \\\"inputOptionList\\\": null,\\n    \\\"inputValidation\\\": {\\n        \\\"regex\\\": [\\n            {\\n                \\\"value\\\": \\\"^(?! )[a-zA-ZÀ-ÖØ-öø-ÿ '-.]*(?<! )$\\\",\\n                \\\"error\\\": \\\"Please enter a valid first name.\\\"\\n            }\\n        ],\\n        \\\"minLength\\\": 2,\\n        \\\"maxLength\\\": 100,\\n        \\\"minDate\\\": null,\\n        \\\"maxDate\\\": null,\\n        \\\"minValue\\\": null,\\n        \\\"maxValue\\\": null,\\n        \\\"validationType\\\": null,\\n        \\\"minSelections\\\": null,\\n        \\\"maxSelections\\\": null\\n    },\\n    \\\"dependencyCriteria\\\": null,\\n    \\\"type\\\": \\\"QUESTION\\\"\\n}\") \n            : null;\n            $firstNameWithProp := $firstName = null ? null : $merge([$firstName, {\n                \"properties\": {\n                    \"placeholder\": null,\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": $questions.fieldSets.firstAndLastName.required,\n                    \"comment\": null,\n                    \"searchCapability\": false,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": 0,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n\n            $lastName := ($exists($questions.fieldSets.firstAndLastName) and $questions.fieldSets.firstAndLastName.visible=true) ? $eval(\"{\\n    \\\"id\\\": \\\"28162b01-03ca-499f-85c5-9d80d11799ff\\\",\\n    \\\"label\\\": \\\"Last Name\\\",\\n    \\\"isMultiValue\\\": false,\\n    \\\"field\\\": \\\"lastName\\\",\\n    \\\"inputType\\\": \\\"TEXT\\\",\\n    \\\"properties\\\": {\\n        \\\"placeholder\\\": null,\\n        \\\"minInstances\\\": 1,\\n        \\\"maxInstances\\\": 1,\\n        \\\"isMandatory\\\": $questions.fieldSets.firstAndLastName.required,\\n        \\\"comment\\\": null,\\n        \\\"searchCapability\\\": false,\\n        \\\"searchable\\\": null,\\n        \\\"readOnly\\\": null,\\n        \\\"allowManual\\\": null,\\n        \\\"format\\\": null,\\n        \\\"maxSize\\\": 100,\\n        \\\"maxFiles\\\": null,\\n        \\\"rows\\\": null,\\n        \\\"fullWidth\\\": null,\\n        \\\"mimeTypes\\\": null\\n    },\\n    \\\"inputOptionList\\\": null,\\n    \\\"inputValidation\\\": {\\n        \\\"regex\\\": [\\n            {\\n                \\\"value\\\": \\\"^(?! )[a-zA-ZÀ-ÖØ-öø-ÿ '-.]*(?<! )$\\\",\\n                \\\"error\\\": \\\"Please enter a valid last name.\\\"\\n            }\\n        ],\\n        \\\"minLength\\\": 2,\\n        \\\"maxLength\\\": 100,\\n        \\\"minDate\\\": null,\\n        \\\"maxDate\\\": null,\\n        \\\"minValue\\\": null,\\n        \\\"maxValue\\\": null,\\n        \\\"validationType\\\": null,\\n        \\\"minSelections\\\": null,\\n        \\\"maxSelections\\\": null\\n    },\\n    \\\"dependencyCriteria\\\": null,\\n    \\\"type\\\": \\\"QUESTION\\\"\\n}\") \n            : null;\n            $lastNameWithProp := $lastName = null ? null : $merge([$lastName, {\n                \"properties\": {\n                    \"placeholder\": null,\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": $questions.fieldSets.firstAndLastName.required,\n                    \"comment\": null,\n                    \"searchCapability\": false,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": 100,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n\n\n            $email := ($exists($questions.fieldSets.email) and $questions.fieldSets.email.visible=true) ? $eval(\"{\\n    \\\"id\\\": \\\"bbf87365-6893-48c4-b427-c547ee42e9c6\\\",\\n    \\\"label\\\": \\\"Email\\\",\\n    \\\"isMultiValue\\\": false,\\n    \\\"field\\\": \\\"email\\\",\\n    \\\"inputType\\\": \\\"TEXT\\\",\\n    \\\"properties\\\": {\\n        \\\"placeholder\\\": null,\\n        \\\"minInstances\\\": 1,\\n        \\\"maxInstances\\\": 1,\\n        \\\"isMandatory\\\": $questions.fieldSets.email.required,\\n        \\\"comment\\\": null,\\n        \\\"searchCapability\\\": false,\\n        \\\"searchable\\\": null,\\n        \\\"readOnly\\\": null,\\n        \\\"allowManual\\\": null,\\n        \\\"format\\\": null,\\n        \\\"maxSize\\\": 100,\\n        \\\"maxFiles\\\": null,\\n        \\\"rows\\\": null,\\n        \\\"fullWidth\\\": null,\\n        \\\"mimeTypes\\\": null\\n    },\\n    \\\"inputOptionList\\\": null,\\n    \\\"inputValidation\\\": {\\n        \\\"regex\\\": [\\n            {\\n                \\\"value\\\": \\\"^(?=.{1,64}@.{1,256}$)\\\\\\\\w+([\\\\\\\\.+-]?\\\\\\\\w+)*@\\\\\\\\w+([\\\\\\\\.-]?\\\\\\\\w+)*(\\\\\\\\.\\\\\\\\w{2,})+$\\\",\\n                \\\"error\\\": \\\"Invalid Email\\\"\\n            }\\n        ],\\n        \\\"minLength\\\": 0,\\n        \\\"maxLength\\\": 100,\\n        \\\"minDate\\\": null,\\n        \\\"maxDate\\\": null,\\n        \\\"minValue\\\": null,\\n        \\\"maxValue\\\": null,\\n        \\\"validationType\\\": null,\\n        \\\"minSelections\\\": null,\\n        \\\"maxSelections\\\": null\\n    },\\n    \\\"dependencyCriteria\\\": null,\\n    \\\"type\\\": \\\"QUESTION\\\"\\n}\")\n            : null;\n            $emailWithProp := $email = null ? null : $merge([$email, {\n                \"properties\": {\n                    \"placeholder\": null,\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": $questions.fieldSets.email.required,\n                    \"comment\": null,\n                    \"searchCapability\": false,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": 100,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n\n            $placeOfResidence := ($exists($questions.fieldSets.placeOfResidence) and $questions.fieldSets.placeOfResidence.visible=true) ? $eval(\"{\\\"id\\\":\\\"861449fc-8284-450a-9b2e-5152b8556834\\\",\\\"label\\\":\\\"City\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"city\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":null,\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}\") : null;\n            $placeOfResidenceWithProp := $placeOfResidence = null ? null : $merge([$placeOfResidence, {\n                \"properties\": {\n                    \"placeholder\": null,\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": $questions.fieldSets.placeOfResidence.required,\n                    \"comment\": null,\n                    \"searchCapability\": true,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": null,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n\n            $phoneNumber := ($exists($questions.fieldSets.phoneNumber) and $questions.fieldSets.phoneNumber.visible=true) ? $eval(\"{\\n    \\\"id\\\": \\\"17030226-75ed-4187-a73d-afe116473950\\\",\\n    \\\"label\\\": \\\"Phone Number\\\",\\n    \\\"isMultiValue\\\": false,\\n    \\\"field\\\": \\\"phoneNumber\\\",\\n    \\\"inputType\\\": \\\"PHONE\\\",\\n    \\\"properties\\\": {\\n        \\\"placeholder\\\": \\\"Phone Number\\\",\\n        \\\"minInstances\\\": 1,\\n        \\\"maxInstances\\\": 1,\\n        \\\"isMandatory\\\": $questions.fieldSets.phoneNumber.required,\\n        \\\"comment\\\": null,\\n        \\\"searchCapability\\\": null,\\n        \\\"searchable\\\": null,\\n        \\\"readOnly\\\": null,\\n        \\\"allowManual\\\": null,\\n        \\\"format\\\": null,\\n        \\\"maxSize\\\": 100,\\n        \\\"maxFiles\\\": null,\\n        \\\"rows\\\": null,\\n        \\\"fullWidth\\\": null,\\n        \\\"mimeTypes\\\": null\\n    },\\n    \\\"inputOptionList\\\": [\\n        {\\n            \\\"label\\\": \\\"Afghanistan (+93)\\\",\\n            \\\"value\\\": \\\"AF (+93)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Åland Islands (+358)\\\",\\n            \\\"value\\\": \\\"AX (+358)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Albania (+355)\\\",\\n            \\\"value\\\": \\\"AL (+355)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Algeria (+213)\\\",\\n            \\\"value\\\": \\\"DZ (+213)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"American Samoa (+1)\\\",\\n            \\\"value\\\": \\\"AS (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Andorra (+376)\\\",\\n            \\\"value\\\": \\\"AD (+376)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Angola (+244)\\\",\\n            \\\"value\\\": \\\"AO (+244)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Anguilla (+1)\\\",\\n            \\\"value\\\": \\\"AI (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Antigua and Barbuda (+1)\\\",\\n            \\\"value\\\": \\\"AG (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Argentina (+54)\\\",\\n            \\\"value\\\": \\\"AR (+54)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Armenia (+374)\\\",\\n            \\\"value\\\": \\\"AM (+374)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Aruba (+297)\\\",\\n            \\\"value\\\": \\\"AW (+297)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Australia (+61)\\\",\\n            \\\"value\\\": \\\"AU (+61)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Austria (+43)\\\",\\n            \\\"value\\\": \\\"AT (+43)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Azerbaijan (+994)\\\",\\n            \\\"value\\\": \\\"AZ (+994)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bahamas (+1)\\\",\\n            \\\"value\\\": \\\"BS (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bahrain (+973)\\\",\\n            \\\"value\\\": \\\"BH (+973)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bangladesh (+880)\\\",\\n            \\\"value\\\": \\\"BD (+880)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Barbados (+1)\\\",\\n            \\\"value\\\": \\\"BB (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Belarus (+375)\\\",\\n            \\\"value\\\": \\\"BY (+375)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Belgium (+32)\\\",\\n            \\\"value\\\": \\\"BE (+32)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Belize (+501)\\\",\\n            \\\"value\\\": \\\"BZ (+501)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Benin (+229)\\\",\\n            \\\"value\\\": \\\"BJ (+229)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bermuda (+1)\\\",\\n            \\\"value\\\": \\\"BM (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bhutan (+975)\\\",\\n            \\\"value\\\": \\\"BT (+975)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bosnia and Herzegovina (+387)\\\",\\n            \\\"value\\\": \\\"BA (+387)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Botswana (+267)\\\",\\n            \\\"value\\\": \\\"BW (+267)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Brazil (+55)\\\",\\n            \\\"value\\\": \\\"BR (+55)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"British Indian Ocean Territory (+246)\\\",\\n            \\\"value\\\": \\\"IO (+246)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bulgaria (+359)\\\",\\n            \\\"value\\\": \\\"BG (+359)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Burkina Faso (+226)\\\",\\n            \\\"value\\\": \\\"BF (+226)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Burundi (+257)\\\",\\n            \\\"value\\\": \\\"BI (+257)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cambodia (+855)\\\",\\n            \\\"value\\\": \\\"KH (+855)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cameroon (+237)\\\",\\n            \\\"value\\\": \\\"CM (+237)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Canada (+1)\\\",\\n            \\\"value\\\": \\\"CA (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cayman Islands (+1)\\\",\\n            \\\"value\\\": \\\"KY (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Central African Republic (+236)\\\",\\n            \\\"value\\\": \\\"CF (+236)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Chad (+235)\\\",\\n            \\\"value\\\": \\\"TD (+235)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Chile (+56)\\\",\\n            \\\"value\\\": \\\"CL (+56)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"China (+86)\\\",\\n            \\\"value\\\": \\\"CN (+86)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Christmas Island (+61)\\\",\\n            \\\"value\\\": \\\"CX (+61)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cocos (Keeling) Islands (+61)\\\",\\n            \\\"value\\\": \\\"CC (+61)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Colombia (+57)\\\",\\n            \\\"value\\\": \\\"CO (+57)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Comoros (+269)\\\",\\n            \\\"value\\\": \\\"KM (+269)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Congo (+242)\\\",\\n            \\\"value\\\": \\\"CG (+242)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cook Islands (+682)\\\",\\n            \\\"value\\\": \\\"CK (+682)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Costa Rica (+506)\\\",\\n            \\\"value\\\": \\\"CR (+506)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Croatia (+385)\\\",\\n            \\\"value\\\": \\\"HR (+385)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cuba (+53)\\\",\\n            \\\"value\\\": \\\"CU (+53)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cyprus (+357)\\\",\\n            \\\"value\\\": \\\"CY (+357)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Czech Republic (+420)\\\",\\n            \\\"value\\\": \\\"CZ (+420)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Denmark (+45)\\\",\\n            \\\"value\\\": \\\"DK (+45)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Djibouti (+253)\\\",\\n            \\\"value\\\": \\\"DJ (+253)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Dominica (+1)\\\",\\n            \\\"value\\\": \\\"DM (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Dominican Republic (+1)\\\",\\n            \\\"value\\\": \\\"DO (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Ecuador (+593)\\\",\\n            \\\"value\\\": \\\"EC (+593)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Egypt (+20)\\\",\\n            \\\"value\\\": \\\"EG (+20)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"El Salvador (+503)\\\",\\n            \\\"value\\\": \\\"SV (+503)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Equatorial Guinea (+240)\\\",\\n            \\\"value\\\": \\\"GQ (+240)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Eritrea (+291)\\\",\\n            \\\"value\\\": \\\"ER (+291)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Estonia (+372)\\\",\\n            \\\"value\\\": \\\"EE (+372)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Ethiopia (+251)\\\",\\n            \\\"value\\\": \\\"ET (+251)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Faroe Islands (+298)\\\",\\n            \\\"value\\\": \\\"FO (+298)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Fiji (+679)\\\",\\n            \\\"value\\\": \\\"FJ (+679)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Finland (+358)\\\",\\n            \\\"value\\\": \\\"FI (+358)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"France (+33)\\\",\\n            \\\"value\\\": \\\"FR (+33)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"French Guiana (+594)\\\",\\n            \\\"value\\\": \\\"GF (+594)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"French Polynesia (+689)\\\",\\n            \\\"value\\\": \\\"PF (+689)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Gabon (+241)\\\",\\n            \\\"value\\\": \\\"GA (+241)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Gambia (+220)\\\",\\n            \\\"value\\\": \\\"GM (+220)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Georgia (+995)\\\",\\n            \\\"value\\\": \\\"GE (+995)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Germany (+49)\\\",\\n            \\\"value\\\": \\\"DE (+49)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Ghana (+233)\\\",\\n            \\\"value\\\": \\\"GH (+233)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Gibraltar (+350)\\\",\\n            \\\"value\\\": \\\"GI (+350)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Greece (+30)\\\",\\n            \\\"value\\\": \\\"GR (+30)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Greenland (+299)\\\",\\n            \\\"value\\\": \\\"GL (+299)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Grenada (+1)\\\",\\n            \\\"value\\\": \\\"GD (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guadeloupe (+590)\\\",\\n            \\\"value\\\": \\\"GP (+590)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guam (+1)\\\",\\n            \\\"value\\\": \\\"GU (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guatemala (+502)\\\",\\n            \\\"value\\\": \\\"GT (+502)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guernsey (+44)\\\",\\n            \\\"value\\\": \\\"GG (+44)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guinea (+224)\\\",\\n            \\\"value\\\": \\\"GN (+224)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guinea-Bissau (+245)\\\",\\n            \\\"value\\\": \\\"GW (+245)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guyana (+592)\\\",\\n            \\\"value\\\": \\\"GY (+592)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Haiti (+509)\\\",\\n            \\\"value\\\": \\\"HT (+509)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Holy See (Vatican City State) (+39)\\\",\\n            \\\"value\\\": \\\"VA (+39)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Honduras (+504)\\\",\\n            \\\"value\\\": \\\"HN (+504)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Hong Kong (+852)\\\",\\n            \\\"value\\\": \\\"HK (+852)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Hungary (+36)\\\",\\n            \\\"value\\\": \\\"HU (+36)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Iceland (+354)\\\",\\n            \\\"value\\\": \\\"IS (+354)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"India (+91)\\\",\\n            \\\"value\\\": \\\"IN (+91)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Indonesia (+62)\\\",\\n            \\\"value\\\": \\\"ID (+62)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Iraq (+964)\\\",\\n            \\\"value\\\": \\\"IQ (+964)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Ireland (+353)\\\",\\n            \\\"value\\\": \\\"IE (+353)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Isle of Man (+44)\\\",\\n            \\\"value\\\": \\\"IM (+44)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Israel (+972)\\\",\\n            \\\"value\\\": \\\"IL (+972)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Italy (+39)\\\",\\n            \\\"value\\\": \\\"IT (+39)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Jamaica (+1)\\\",\\n            \\\"value\\\": \\\"JM (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Japan (+81)\\\",\\n            \\\"value\\\": \\\"JP (+81)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Jersey (+44)\\\",\\n            \\\"value\\\": \\\"JE (+44)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Jordan (+962)\\\",\\n            \\\"value\\\": \\\"JO (+962)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kazakhstan (+7)\\\",\\n            \\\"value\\\": \\\"KZ (+7)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kenya (+254)\\\",\\n            \\\"value\\\": \\\"KE (+254)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kiribati (+686)\\\",\\n            \\\"value\\\": \\\"KI (+686)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kosovo (+383)\\\",\\n            \\\"value\\\": \\\"XK (+383)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kosovo (+377)\\\",\\n            \\\"value\\\": \\\"XK (+377)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kosovo (+381)\\\",\\n            \\\"value\\\": \\\"XK (+381)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kosovo (+386)\\\",\\n            \\\"value\\\": \\\"XK (+386)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kuwait (+965)\\\",\\n            \\\"value\\\": \\\"KW (+965)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kyrgyzstan (+996)\\\",\\n            \\\"value\\\": \\\"KG (+996)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Laos (+856)\\\",\\n            \\\"value\\\": \\\"LA (+856)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Latvia (+371)\\\",\\n            \\\"value\\\": \\\"LV (+371)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Lebanon (+961)\\\",\\n            \\\"value\\\": \\\"LB (+961)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Lesotho (+266)\\\",\\n            \\\"value\\\": \\\"LS (+266)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Liberia (+231)\\\",\\n            \\\"value\\\": \\\"LR (+231)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Liechtenstein (+423)\\\",\\n            \\\"value\\\": \\\"LI (+423)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Lithuania (+370)\\\",\\n            \\\"value\\\": \\\"LT (+370)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Luxembourg (+352)\\\",\\n            \\\"value\\\": \\\"LU (+352)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Macao (+853)\\\",\\n            \\\"value\\\": \\\"MO (+853)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Madagascar (+261)\\\",\\n            \\\"value\\\": \\\"MG (+261)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Malawi (+265)\\\",\\n            \\\"value\\\": \\\"MW (+265)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Malaysia (+60)\\\",\\n            \\\"value\\\": \\\"MY (+60)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Maldives (+960)\\\",\\n            \\\"value\\\": \\\"MV (+960)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mali (+223)\\\",\\n            \\\"value\\\": \\\"ML (+223)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Malta (+356)\\\",\\n            \\\"value\\\": \\\"MT (+356)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Marshall Islands (+692)\\\",\\n            \\\"value\\\": \\\"MH (+692)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Martinique (+596)\\\",\\n            \\\"value\\\": \\\"MQ (+596)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mauritania (+222)\\\",\\n            \\\"value\\\": \\\"MR (+222)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mauritius (+230)\\\",\\n            \\\"value\\\": \\\"MU (+230)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mayotte (+262)\\\",\\n            \\\"value\\\": \\\"YT (+262)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mexico (+52)\\\",\\n            \\\"value\\\": \\\"MX (+52)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Moldova (+373)\\\",\\n            \\\"value\\\": \\\"MD (+373)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Monaco (+377)\\\",\\n            \\\"value\\\": \\\"MC (+377)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mongolia (+976)\\\",\\n            \\\"value\\\": \\\"MN (+976)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Montenegro (+382)\\\",\\n            \\\"value\\\": \\\"ME (+382)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Montserrat (+1)\\\",\\n            \\\"value\\\": \\\"MS (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Morocco (+212)\\\",\\n            \\\"value\\\": \\\"MA (+212)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mozambique (+258)\\\",\\n            \\\"value\\\": \\\"MZ (+258)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Myanmar (+95)\\\",\\n            \\\"value\\\": \\\"MM (+95)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Namibia (+264)\\\",\\n            \\\"value\\\": \\\"NA (+264)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Nauru (+674)\\\",\\n            \\\"value\\\": \\\"NR (+674)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Nepal (+977)\\\",\\n            \\\"value\\\": \\\"NP (+977)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Netherlands (+31)\\\",\\n            \\\"value\\\": \\\"NL (+31)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"New Caledonia (+687)\\\",\\n            \\\"value\\\": \\\"NC (+687)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"New Zealand (+64)\\\",\\n            \\\"value\\\": \\\"NZ (+64)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Nicaragua (+505)\\\",\\n            \\\"value\\\": \\\"NI (+505)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Niger (+227)\\\",\\n            \\\"value\\\": \\\"NE (+227)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Nigeria (+234)\\\",\\n            \\\"value\\\": \\\"NG (+234)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Niue (+683)\\\",\\n            \\\"value\\\": \\\"NU (+683)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Norfolk Island (+672)\\\",\\n            \\\"value\\\": \\\"NF (+672)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Northern Mariana Islands (+1)\\\",\\n            \\\"value\\\": \\\"MP (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Norway (+47)\\\",\\n            \\\"value\\\": \\\"NO (+47)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Oman (+968)\\\",\\n            \\\"value\\\": \\\"OM (+968)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Pakistan (+92)\\\",\\n            \\\"value\\\": \\\"PK (+92)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Palau (+680)\\\",\\n            \\\"value\\\": \\\"PW (+680)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Panama (+507)\\\",\\n            \\\"value\\\": \\\"PA (+507)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Papua New Guinea (+675)\\\",\\n            \\\"value\\\": \\\"PG (+675)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Paraguay (+595)\\\",\\n            \\\"value\\\": \\\"PY (+595)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Peru (+51)\\\",\\n            \\\"value\\\": \\\"PE (+51)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Philippines (+63)\\\",\\n            \\\"value\\\": \\\"PH (+63)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Poland (+48)\\\",\\n            \\\"value\\\": \\\"PL (+48)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Portugal (+351)\\\",\\n            \\\"value\\\": \\\"PT (+351)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Puerto Rico (+1)\\\",\\n            \\\"value\\\": \\\"PR (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Qatar (+974)\\\",\\n            \\\"value\\\": \\\"QA (+974)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Reunion (+262)\\\",\\n            \\\"value\\\": \\\"RE (+262)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Romania (+40)\\\",\\n            \\\"value\\\": \\\"RO (+40)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Rwanda (+250)\\\",\\n            \\\"value\\\": \\\"RW (+250)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Barthelemy (+590)\\\",\\n            \\\"value\\\": \\\"BL (+590)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Kitts and Nevis (+869)\\\",\\n            \\\"value\\\": \\\"KN (+869)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Lucia (+1)\\\",\\n            \\\"value\\\": \\\"LC (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Martin (+590)\\\",\\n            \\\"value\\\": \\\"MF (+590)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Pierre and Miquelon (+508)\\\",\\n            \\\"value\\\": \\\"PM (+508)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Vincent and the Grenadines (+1)\\\",\\n            \\\"value\\\": \\\"VC (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Samoa (+685)\\\",\\n            \\\"value\\\": \\\"WS (+685)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"San Marino (+378)\\\",\\n            \\\"value\\\": \\\"SM (+378)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Sao Tome and Principe (+239)\\\",\\n            \\\"value\\\": \\\"ST (+239)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saudi Arabia (+966)\\\",\\n            \\\"value\\\": \\\"SA (+966)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Senegal (+221)\\\",\\n            \\\"value\\\": \\\"SN (+221)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Serbia (+381)\\\",\\n            \\\"value\\\": \\\"RS (+381)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Seychelles (+248)\\\",\\n            \\\"value\\\": \\\"SC (+248)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Sierra Leone (+232)\\\",\\n            \\\"value\\\": \\\"SL (+232)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Singapore (+65)\\\",\\n            \\\"value\\\": \\\"SG (+65)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Slovakia (+421)\\\",\\n            \\\"value\\\": \\\"SK (+421)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Slovenia (+386)\\\",\\n            \\\"value\\\": \\\"SI (+386)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Solomon Islands (+677)\\\",\\n            \\\"value\\\": \\\"SB (+677)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Somalia (+252)\\\",\\n            \\\"value\\\": \\\"SO (+252)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"South Africa (+27)\\\",\\n            \\\"value\\\": \\\"ZA (+27)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"South Sudan (+211)\\\",\\n            \\\"value\\\": \\\"SS (+211)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Spain (+34)\\\",\\n            \\\"value\\\": \\\"ES (+34)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Sri Lanka (+94)\\\",\\n            \\\"value\\\": \\\"LK (+94)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Sudan (+249)\\\",\\n            \\\"value\\\": \\\"SD (+249)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Suri (+597)\\\",\\n            \\\"value\\\": \\\"SR (+597)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Svalbard and Jan Mayen (+47)\\\",\\n            \\\"value\\\": \\\"SJ (+47)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Swaziland (+268)\\\",\\n            \\\"value\\\": \\\"SZ (+268)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Sweden (+46)\\\",\\n            \\\"value\\\": \\\"SE (+46)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Switzerland (+41)\\\",\\n            \\\"value\\\": \\\"CH (+41)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Taiwan (+886)\\\",\\n            \\\"value\\\": \\\"TW (+886)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Tajikistan (+992)\\\",\\n            \\\"value\\\": \\\"TJ (+992)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Thailand (+66)\\\",\\n            \\\"value\\\": \\\"TH (+66)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Timor-Leste (+670)\\\",\\n            \\\"value\\\": \\\"TL (+670)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Togo (+228)\\\",\\n            \\\"value\\\": \\\"TG (+228)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Tokelau (+690)\\\",\\n            \\\"value\\\": \\\"TK (+690)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Tonga (+676)\\\",\\n            \\\"value\\\": \\\"TO (+676)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Trinidad and Tobago (+1)\\\",\\n            \\\"value\\\": \\\"TT (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Tunisia (+216)\\\",\\n            \\\"value\\\": \\\"TN (+216)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Turkey (+90)\\\",\\n            \\\"value\\\": \\\"TR (+90)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Turkmenistan (+993)\\\",\\n            \\\"value\\\": \\\"TM (+993)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Turks and Caicos Islands (+1)\\\",\\n            \\\"value\\\": \\\"TC (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Tuvalu (+688)\\\",\\n            \\\"value\\\": \\\"TV (+688)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Uganda (+256)\\\",\\n            \\\"value\\\": \\\"UG (+256)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Ukraine (+380)\\\",\\n            \\\"value\\\": \\\"UA (+380)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"United Arab Emirates (+971)\\\",\\n            \\\"value\\\": \\\"AE (+971)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"United Kingdom (+44)\\\",\\n            \\\"value\\\": \\\"GB (+44)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Uruguay (+598)\\\",\\n            \\\"value\\\": \\\"UY (+598)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Uzbekistan (+998)\\\",\\n            \\\"value\\\": \\\"UZ (+998)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Vanuatu (+678)\\\",\\n            \\\"value\\\": \\\"VU (+678)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Vietnam (+84)\\\",\\n            \\\"value\\\": \\\"VN (+84)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Wallis and Futuna (+681)\\\",\\n            \\\"value\\\": \\\"WF (+681)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Yemen (+967)\\\",\\n            \\\"value\\\": \\\"YE (+967)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Zambia (+260)\\\",\\n            \\\"value\\\": \\\"ZM (+260)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Zimbabwe (+263)\\\",\\n            \\\"value\\\": \\\"ZW (+263)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"United States of America (+1)\\\",\\n            \\\"value\\\": \\\"US (+1)\\\"\\n        }\\n    ],\\n    \\\"inputValidation\\\": null,\\n    \\\"dependencyCriteria\\\": null,\\n    \\\"type\\\": \\\"QUESTION\\\"\\n}\")\n            : null;\n            $phoneNumberWithProp := $phoneNumber = null ? null : $merge([$phoneNumber, {\n                \"properties\": {\n                    \"placeholder\": \"Phone Number\",\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": $questions.fieldSets.phoneNumber.required,\n                    \"comment\": null,\n                    \"searchCapability\": null,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": 100,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n\n\n            $resume := ($exists($questions.fieldSets.resume) and $questions.fieldSets.resume.visible=true) ? $eval(\"{\\n    \\\"id\\\": \\\"37d1e432-8562-4082-81ef-b89cd5e897f6\\\",\\n    \\\"label\\\": \\\"Resume\\\",\\n    \\\"isMultiValue\\\": false,\\n    \\\"field\\\": \\\"resumeUrl\\\",\\n    \\\"inputType\\\": \\\"RESUME\\\",\\n    \\\"properties\\\": {\\n        \\\"placeholder\\\": null,\\n        \\\"minInstances\\\": 1,\\n        \\\"maxInstances\\\": 1,\\n        \\\"isMandatory\\\": $questions.fieldSets.resume.required,\\n        \\\"comment\\\": null,\\n        \\\"searchCapability\\\": null,\\n        \\\"searchable\\\": null,\\n        \\\"readOnly\\\": null,\\n        \\\"allowManual\\\": null,\\n        \\\"format\\\": null,\\n        \\\"maxSize\\\": 5242880,\\n        \\\"maxFiles\\\": 1,\\n        \\\"rows\\\": null,\\n        \\\"fullWidth\\\": null,\\n        \\\"mimeTypes\\\": [\\n            \\\"PDF\\\",\\n            \\\"DOC\\\",\\n            \\\"DOCX\\\"\\n        ]\\n    },\\n    \\\"inputOptionList\\\": null,\\n    \\\"inputValidation\\\": null,\\n    \\\"dependencyCriteria\\\": null,\\n    \\\"type\\\": \\\"QUESTION\\\"\\n}\")\n            : null;\n            $resumeWithProp := $resume = null ? null : $merge([$resume, {\n                \"properties\": {\n                    \"placeholder\": null,\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": $questions.fieldSets.resume.required,\n                    \"comment\": null,\n                    \"searchCapability\": null,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": 5242880,\n                    \"maxFiles\": 1,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": [\n                        \"PDF\",\n                        \"DOC\",\n                        \"DOCX\"\n                    ]\n                }\n            }]);\n\n            $experience := ($exists($questions.fieldSets.experience) and $questions.fieldSets.experience.visible=true) ? $eval(\"{\\\"id\\\":\\\"7ff004d7-69bd-41d0-9172-bedce19c9b1b\\\",\\\"label\\\":\\\"Experience\\\",\\\"isMultiValue\\\":true,\\\"field\\\":\\\"work\\\",\\\"questionEntities\\\":[[{\\\"id\\\":\\\"b2a9af47-1918-4c2b-b26e-93b55a4052bc\\\",\\\"label\\\":\\\"Title\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"position\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":true,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":0,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":{\\\"regex\\\":[{\\\"value\\\":\\\"[^<>@[\\\\\\\\]{}\\\\\\\"\\\\\\\\\\\\\\\\]*\\\",\\\"error\\\":\\\"Contains illegal characters < > [ ] \\\\\\\" { } \\\\\\\\\\\"}],\\\"minLength\\\":0,\\\"maxLength\\\":100,\\\"minDate\\\":null,\\\"maxDate\\\":null,\\\"minValue\\\":null,\\\"maxValue\\\":null,\\\"validationType\\\":null,\\\"minSelections\\\":null,\\\"maxSelections\\\":null},\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"},{\\\"id\\\":\\\"705d683e-dcc6-4f57-bb14-5bd32c5eedd7\\\",\\\"label\\\":\\\"Company\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"company\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":0,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":{\\\"regex\\\":[{\\\"value\\\":\\\"[^<>@[\\\\\\\\]{}\\\\\\\"\\\\\\\\\\\\\\\\]*\\\",\\\"error\\\":\\\"Contains illegal characters < > [ ] \\\\\\\" { } \\\\\\\\\\\"}],\\\"minLength\\\":0,\\\"maxLength\\\":100,\\\"minDate\\\":null,\\\"maxDate\\\":null,\\\"minValue\\\":null,\\\"maxValue\\\":null,\\\"validationType\\\":null,\\\"minSelections\\\":null,\\\"maxSelections\\\":null},\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}],[{\\\"id\\\":\\\"861449fc-8284-450a-9b2e-5152b8556834\\\",\\\"label\\\":\\\"City\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"city\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":true,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":null,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":null,\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"},{\\\"id\\\":\\\"861449fc-8284-450a-9b2e-5152b8556834\\\",\\\"label\\\":\\\"State\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"state\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":true,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":null,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":null,\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"},{\\\"id\\\":\\\"861449fc-8284-450a-9b2e-5152b8556834\\\",\\\"label\\\":\\\"Country\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"country\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":true,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":null,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":null,\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}],[{\\\"id\\\":\\\"c8c72899-0ea4-43e2-a0cf-2551a62c085d\\\",\\\"label\\\":\\\"Description\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"description\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT_AREA\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":\\\"mm/yyyy\\\",\\\"maxSize\\\":0,\\\"maxFiles\\\":null,\\\"rows\\\":4,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":{\\\"regex\\\":null,\\\"minLength\\\":0,\\\"maxLength\\\":10000,\\\"minDate\\\":null,\\\"maxDate\\\":null,\\\"minValue\\\":null,\\\"maxValue\\\":null,\\\"validationType\\\":null,\\\"minSelections\\\":1,\\\"maxSelections\\\":1},\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}],[{\\\"id\\\":\\\"65cb1b65-c977-4c9a-8202-3f834c8c2581\\\",\\\"label\\\":\\\"From|To\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"fromToRange\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"DATE_RANGE\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":true,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":\\\"mm/yyyy\\\",\\\"maxSize\\\":0,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":{\\\"regex\\\":null,\\\"minLength\\\":0,\\\"maxLength\\\":0,\\\"minDate\\\":\\\"1901-01-01T00:00:00.000+00:00\\\",\\\"maxDate\\\":\\\"2024-12-10T00:00:00.000+00:00\\\",\\\"minValue\\\":null,\\\"maxValue\\\":null,\\\"validationType\\\":null,\\\"minSelections\\\":1,\\\"maxSelections\\\":1},\\\"dependencyCriteria\\\":{\\\"operator\\\":\\\"ALL\\\",\\\"defaultBehavior\\\":\\\"HIDE\\\",\\\"criteria\\\":[{\\\"field\\\":\\\"work.isCurrent\\\",\\\"values\\\":\\\"I currently work here\\\"}]},\\\"type\\\":\\\"QUESTION\\\"}],[{\\\"id\\\":\\\"c5903da7-219b-4fce-83ce-caf1bb3440f2\\\",\\\"label\\\":null,\\\"isMultiValue\\\":false,\\\"field\\\":\\\"isCurrent\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"CHECKBOX\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":0,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":[{\\\"label\\\":\\\"I currently work here\\\",\\\"value\\\":\\\"I currently work here\\\"}],\\\"inputValidation\\\":{\\\"regex\\\":null,\\\"minLength\\\":0,\\\"maxLength\\\":0,\\\"minDate\\\":null,\\\"maxDate\\\":null,\\\"minValue\\\":null,\\\"maxValue\\\":null,\\\"validationType\\\":null,\\\"minSelections\\\":0,\\\"maxSelections\\\":1},\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}]],\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":0,\\\"maxInstances\\\":5,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":null,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION_SET\\\"}\") : null;\n            $experienceWithProp := $experience = null ? null : $merge([$experience, {\n                \"properties\": {\n                    \"placeholder\": null,\n                    \"minInstances\": 0,\n                    \"maxInstances\": 5,\n                    \"isMandatory\": $questions.fieldSets.experience.required,\n                    \"comment\": null,\n                    \"searchCapability\": null,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": null,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n\n            $education := ($exists($questions.fieldSets.education) and $questions.fieldSets.education.visible=true) ? (\n                $institution := ($exists($questions.fieldSets.education.institution) and $questions.fieldSets.education.institution.visible=true) ? $eval(\"{\\\"id\\\":\\\"1327255e-cea1-4a61-b030-5ba6b681170b\\\",\\\"label\\\":\\\"Institution\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"institution\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":true,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":0,\\\"maxFiles\\\":null,\\\"rows\\\":0,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":{\\\"regex\\\":[{\\\"value\\\":\\\"[^<>[\\\\\\\\]{}\\\\\\\"\\\\\\\\\\\\\\\\]*\\\",\\\"error\\\":\\\"Contains illegal characters < > [ ] \\\\\\\" { } \\\\\\\\\\\"}],\\\"minLength\\\":0,\\\"maxLength\\\":100,\\\"minDate\\\":null,\\\"maxDate\\\":null,\\\"minValue\\\":null,\\\"maxValue\\\":null,\\\"validationType\\\":null,\\\"minSelections\\\":1,\\\"maxSelections\\\":1},\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}\") : null;\n                $institutionWithProp := $institution = null ? null : $merge([$institution, {\n                    \"properties\": {\n                        \"placeholder\": null,\n                        \"minInstances\": 1,\n                        \"maxInstances\": 1,\n                        \"isMandatory\": $questions.fieldSets.education.institution.required,\n                        \"comment\": null,\n                        \"searchCapability\": null,\n                        \"searchable\": null,\n                        \"readOnly\": null,\n                        \"allowManual\": null,\n                        \"format\": null,\n                        \"maxSize\": 0,\n                        \"maxFiles\": null,\n                        \"rows\": 0,\n                        \"fullWidth\": null,\n                        \"mimeTypes\": null\n                    }\n                }]);\n\n                $toAndFromDates := ($exists($questions.fieldSets.education.educationDates) and $questions.fieldSets.education.educationDates.visible=true) ? $eval(\"{\\\"id\\\":\\\"d33181cd-6af3-48a2-acc7-4b4c1d50a94d\\\",\\\"label\\\":\\\"From|To\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"fromToRange\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"DATE_RANGE\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":true,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":\\\"mm/yyyy\\\",\\\"maxSize\\\":0,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":{\\\"regex\\\":null,\\\"minLength\\\":0,\\\"maxLength\\\":0,\\\"minDate\\\":\\\"1901-01-01T00:00:00.000+00:00\\\",\\\"maxDate\\\":\\\"2024-12-10T00:00:00.000+00:00\\\",\\\"minValue\\\":null,\\\"maxValue\\\":null,\\\"validationType\\\":null,\\\"minSelections\\\":1,\\\"maxSelections\\\":1},\\\"dependencyCriteria\\\":{\\\"operator\\\":\\\"ALL\\\",\\\"defaultBehavior\\\":\\\"HIDE\\\",\\\"criteria\\\":[{\\\"field\\\":\\\"education.isCurrent\\\",\\\"values\\\":\\\"I currently attend\\\"}]},\\\"type\\\":\\\"QUESTION\\\"}\") : null;\n                $toAndFromDatesWithProp := $toAndFromDates = null ? null : $merge([$toAndFromDates, {\n                    \"properties\": {\n                        \"placeholder\": null,\n                        \"minInstances\": 1,\n                        \"maxInstances\": 1,\n                        \"isMandatory\": $questions.fieldSets.education.educationDates.required,\n                        \"comment\": null,\n                        \"searchCapability\": null,\n                        \"searchable\": null,\n                        \"readOnly\": null,\n                        \"allowManual\": null,\n                        \"format\": \"mm/yyyy\",\n                        \"maxSize\": 0,\n                        \"maxFiles\": null,\n                        \"rows\": null,\n                        \"fullWidth\": null,\n                        \"mimeTypes\": null\n                    }\n                }]);\n\n                $educationQn := $eval(\"{\\\"id\\\":\\\"c04888b5-015a-45a2-9600-33e45ddf33fa\\\",\\\"label\\\":\\\"Education\\\",\\\"isMultiValue\\\":true,\\\"field\\\":\\\"education\\\",\\\"questionEntities\\\":[],\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":0,\\\"maxInstances\\\":5,\\\"isMandatory\\\":null,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":null,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION_SET\\\"}\");\n                $educationQnWithProp := $merge([$educationQn, {\n                    \"properties\": {\n                        \"placeholder\": null,\n                        \"minInstances\": 0,\n                        \"maxInstances\": 5,\n                        \"isMandatory\": $questions.fieldSets.education.required,\n                        \"comment\": null,\n                        \"searchCapability\": null,\n                        \"searchable\": null,\n                        \"readOnly\": null,\n                        \"allowManual\": null,\n                        \"format\": null,\n                        \"maxSize\": null,\n                        \"maxFiles\": null,\n                        \"rows\": null,\n                        \"fullWidth\": null,\n                        \"mimeTypes\": null\n                    }\n                }]);\n\n                $major := $eval(\"[{\\\"id\\\":\\\"f91baf34-559e-451e-8809-527631c42f85\\\",\\\"label\\\":\\\"Major\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"Major\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":0,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":{\\\"regex\\\":[{\\\"value\\\":\\\"[^<>@[\\\\\\\\]{}\\\\\\\"\\\\\\\\\\\\\\\\]*\\\",\\\"error\\\":\\\"Contains illegal characters < > [ ] \\\\\\\" { } \\\\\\\\\\\"}],\\\"minLength\\\":0,\\\"maxLength\\\":100,\\\"minDate\\\":null,\\\"maxDate\\\":null,\\\"minValue\\\":null,\\\"maxValue\\\":null,\\\"validationType\\\":null,\\\"minSelections\\\":null,\\\"maxSelections\\\":null},\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"},{\\\"id\\\":\\\"1184f2d0-0d5d-47f9-bbfd-03524e381119\\\",\\\"label\\\":\\\"Degree\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"Degree\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":true,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":0,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":{\\\"regex\\\":[{\\\"value\\\":\\\"[^<>@[\\\\\\\\]{}\\\\\\\"\\\\\\\\\\\\\\\\]*\\\",\\\"error\\\":\\\"Contains illegal characters < > [ ] \\\\\\\" { } \\\\\\\\\\\"}],\\\"minLength\\\":0,\\\"maxLength\\\":100,\\\"minDate\\\":null,\\\"maxDate\\\":null,\\\"minValue\\\":null,\\\"maxValue\\\":null,\\\"validationType\\\":null,\\\"minSelections\\\":null,\\\"maxSelections\\\":null},\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}]\");\n                $cityQn := $eval(\"{\\\"id\\\":\\\"861449fc-8284-450a-9b2e-5152b8556834\\\",\\\"label\\\":\\\"City\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"city\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":true,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":null,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":null,\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}\");\n                $stateQn := $eval(\"{\\\"id\\\":\\\"861449fc-8284-450a-9b2e-5152b8556834\\\",\\\"label\\\":\\\"State\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"state\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":true,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":null,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":null,\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}\");\n                $countryQn := $eval(\"{\\\"id\\\":\\\"861449fc-8284-450a-9b2e-5152b8556834\\\",\\\"label\\\":\\\"Country\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"country\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":true,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":null,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":null,\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}\");\n                $description := $eval(\"[{\\\"id\\\":\\\"c8c72899-0ea4-43e2-a0cf-2551a62c085d\\\",\\\"label\\\":\\\"Description\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"description\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT_AREA\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":\\\"mm/yyyy\\\",\\\"maxSize\\\":0,\\\"maxFiles\\\":null,\\\"rows\\\":4,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":{\\\"regex\\\":null,\\\"minLength\\\":0,\\\"maxLength\\\":10000,\\\"minDate\\\":null,\\\"maxDate\\\":null,\\\"minValue\\\":null,\\\"maxValue\\\":null,\\\"validationType\\\":null,\\\"minSelections\\\":1,\\\"maxSelections\\\":1},\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}]\");\n                $isCurrent := $eval(\"[{\\\"id\\\":\\\"c5903da7-219b-4fce-83ce-caf1bb3440f2\\\",\\\"label\\\":null,\\\"isMultiValue\\\":false,\\\"field\\\":\\\"isCurrent\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"CHECKBOX\\\",\\\"properties\\\":{\\\"placeholder\\\":null,\\\"minInstances\\\":1,\\\"maxInstances\\\":1,\\\"isMandatory\\\":false,\\\"comment\\\":null,\\\"searchCapability\\\":null,\\\"searchable\\\":null,\\\"readOnly\\\":null,\\\"allowManual\\\":null,\\\"format\\\":null,\\\"maxSize\\\":0,\\\"maxFiles\\\":null,\\\"rows\\\":null,\\\"fullWidth\\\":null,\\\"mimeTypes\\\":null},\\\"inputOptionList\\\":[{\\\"label\\\":\\\"I currently attend\\\",\\\"value\\\":\\\"I currently attend\\\"}],\\\"inputValidation\\\":{\\\"regex\\\":null,\\\"minLength\\\":0,\\\"maxLength\\\":0,\\\"minDate\\\":null,\\\"maxDate\\\":null,\\\"minValue\\\":null,\\\"maxValue\\\":null,\\\"validationType\\\":null,\\\"minSelections\\\":0,\\\"maxSelections\\\":1},\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}]\");\n\n                $educationQnEntities := $merge([$educationQnWithProp, {\n                    \"questionEntities\": [[$institutionWithProp], [$major], [$cityQn, $stateQn, $countryQn], [$description], [$toAndFromDatesWithProp], [$isCurrent]]\n                }])\n            );\n\n            $messageToHiringManager := ($exists($questions.fieldSets.messageToHiringManager) and $questions.fieldSets.messageToHiringManager.visible=true) ? $eval(\"{\\n  \\\"id\\\": \\\"8004ad82-7ae2-48f3-b22f-e42c6b87d389\\\",\\n  \\\"label\\\": \\\"<h4>Message to the Hiring Manager</h4>Let the company know about your interest working there\\\",\\n  \\\"field\\\": \\\"additionalFields.messageToHiringManager.workingInterest\\\",\\n  \\\"isMultiValue\\\": false,\\n  \\\"defaultValue\\\": null,\\n  \\\"inputType\\\": \\\"TEXT\\\",\\n  \\\"properties\\\": {\\n    \\\"placeholder\\\": null,\\n    \\\"minInstances\\\": 1,\\n    \\\"maxInstances\\\": 1,\\n    \\\"isMandatory\\\": false,\\n    \\\"comment\\\": null,\\n    \\\"searchCapability\\\": null,\\n    \\\"searchable\\\": null,\\n    \\\"readOnly\\\": null,\\n    \\\"allowManual\\\": null,\\n    \\\"format\\\": null,\\n    \\\"maxSize\\\": 0,\\n    \\\"maxFiles\\\": null,\\n    \\\"rows\\\": null,\\n    \\\"fullWidth\\\": null,\\n    \\\"mimeTypes\\\": null\\n  },\\n  \\\"inputOptionList\\\": null,\\n  \\\"inputValidation\\\": {\\n    \\\"regex\\\": [\\n      {\\n        \\\"value\\\": \\\"[^<>@[\\\\\\\\]{}\\\\\\\"\\\\\\\\\\\\\\\\]*\\\",\\n        \\\"error\\\": \\\"Contains illegal characters < > [ ] \\\\\\\" { } \\\\\\\\\\\"\\n      }\\n    ],\\n    \\\"minLength\\\": 0,\\n    \\\"maxLength\\\": 100,\\n    \\\"minDate\\\": null,\\n    \\\"maxDate\\\": null,\\n    \\\"minValue\\\": null,\\n    \\\"maxValue\\\": null,\\n    \\\"validationType\\\": null,\\n    \\\"minSelections\\\": null,\\n    \\\"maxSelections\\\": null\\n  },\\n  \\\"dependencyCriteria\\\": null,\\n  \\\"type\\\": \\\"QUESTION\\\"\\n}\") : null;\n            $messageToHiringManagerWithProp := $messageToHiringManager = null ? null : $merge([$messageToHiringManager, {\n                \"properties\": {\n                    \"placeholder\": null,\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": $questions.fieldSets.messageToHiringManager.required,\n                    \"comment\": null,\n                    \"searchCapability\": null,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": null,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n            \n\n            [$filter([$firstNameWithProp, $lastNameWithProp, $emailWithProp, $placeOfResidenceWithProp, $phoneNumberWithProp, $resumeWithProp, $experienceWithProp, $education, $messageToHiringManagerWithProp], function($v) {\n                $v!=null\n            })]\n        )\n    };\n\n    $ucpQuestionsArray := $count(sr_get_posting_ucp_questions) > 0 ? $builUcpQuestions(sr_get_posting_ucp_questions[0]) : [];\n    \n    {\n        \"ucpQuestions\": $ucpQuestionsArray,\n        \"additionalQuestions\": $screeningQuestionsArray,\n        \"surveyQuestions\": [],\n        \"consentQuestions\": $consentsQuestionsArray\n    }\n)},\n\"errors\": null\n}"
            }
          ],
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "false"
            }
          ]
        }
      ]
    },
    {
      "dataModel": "JOB_FILTER",
      "integrationType": "REST_API",
      "integrations": [
        {
          "type": "ReadApiIntegration",
          "integrationId": "fetch-career-sites",
          "responseConfig": {
            "responseType": "ARRAY_OF_ENTITIES",
            "jsonataExpression": "content",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(content)"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/configuration/career-sites",
          "headers": {},
          "queryParams": {
            "pageSize": "100",
            "pageId": "${pageId}"
          },
          "contentType": "APPLICATION_JSON",
          "paginationConfig": {
            "type": "ExpressionConfig",
            "limitKey": "pageSize",
            "limitValue": 100,
            "jsonataExpressionMap": {
              "pageId": "($exists($.nextPageId) and $.nextPageId!=null)?$.nextPageId:\"\""
            },
            "paginationIndicatorJsonataExpression": "($exists($.nextPageId) and $.nextPageId!=null)"
          },
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": []
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "fetch-careersite-config",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(jobs)"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": {
            "dependentIntegrationId": "fetch-career-sites",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "careerSiteId",
                "jsonataExpression": "[$map(content, function($v) { $v.id })]",
                "restApiIntegrationContext": "API_PATH"
              }
            ],
            "jsonDataType": "ARRAY_OF_PRIMITIVES",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/configuration/career-sites/${careerSiteId}",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [
            {
              "statusCode": 0,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "true"
                }
              ],
              "jsonataConvertorExpression": "{}"
            }
          ],
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$count($.content) > 0"
            }
          ]
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "post-filters-to-engagement",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "{}",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": {
            "dependentIntegrationId": "fetch-careersite-config",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "body",
                "jsonataExpression": "(\n    $filters := $exists($.jobs.filters) and $.jobs.filters!=null and $.jobs.filtersActive ? $.jobs.filters :{};\n    $tfilters := [$filter(\n            [\n                $exists($filters.location) ? {\n                    \"field\": \"city\",\n                    \"type\": \"STRING\",\n                    \"operator\": \"IN\",\n                    \"entity\": \"job\",\n                    \"combination\": \"OR\",\n                    \"filterValue\": {\n                        \"values\": $filters.location\n                    }\n                } : null,\n\n                $exists($filters.company) ? {\n                    \"field\": \"customStringFields.company\",\n                    \"type\": \"STRING\",\n                    \"operator\": \"IN\",\n                    \"entity\": \"job\",\n                    \"combination\": \"OR\",\n                    \"filterValue\": {\n                        \"values\": $filters.company\n                    }\n                } : null,\n\n                $exists($filters.industryIds) ? {\n                    \"field\": \"customStringFields.industryId\",\n                    \"type\": \"STRING\",\n                    \"operator\": \"IN\",\n                    \"entity\": \"job\",\n                    \"combination\": \"OR\",\n                    \"filterValue\": {\n                        \"values\": $filters.industryIds\n                    }\n                } : null,\n\n                $exists($filters.functionIds) ? {\n                    \"field\": \"customStringFields.functionId\",\n                    \"type\": \"STRING\",\n                    \"operator\": \"IN\",\n                    \"entity\": \"job\",\n                    \"combination\": \"OR\",\n                    \"filterValue\": {\n                        \"values\": $filters.functionIds\n                    }\n                } : null,\n\n                $exists($filters.experienceLevelIds) ? {\n                    \"field\": \"customStringFields.experienceLevelId\",\n                    \"type\": \"STRING\",\n                    \"operator\": \"IN\",\n                    \"entity\": \"job\",\n                    \"combination\": \"OR\",\n                    \"filterValue\": {\n                        \"values\": $filters.experienceLevelIds\n                    }\n                } : null,\n\n                $exists($filters.typeOfEmploymentIds) ? {\n                    \"field\": \"customStringFields.typeOfEmploymentId\",\n                    \"type\": \"STRING\",\n                    \"operator\": \"IN\",\n                    \"entity\": \"job\",\n                    \"combination\": \"OR\",\n                    \"filterValue\": {\n                        \"values\": $filters.typeOfEmploymentIds\n                    }\n                } : null,\n\n                $exists($filters.language) ? {\n                    \"field\": \"customStringFields.language\",\n                    \"type\": \"STRING\",\n                    \"operator\": \"IN\",\n                    \"entity\": \"job\",\n                    \"combination\": \"OR\",\n                    \"filterValue\": {\n                        \"values\": $filters.language\n                    }\n                } : null,\n\n                $exists($filters.customFields) ? $each($filters.customFields, function($value, $key) {\n                    {\n                        \"field\": \"customStringFields.\" & $key,\n                        \"type\": \"STRING\",\n                        \"operator\": \"IN\",\n                        \"entity\": \"job\",\n                        \"combination\": \"OR\",\n                        \"filterValue\": {\n                            \"values\": $value\n                        }\n                    }\n                }) : []\n            ],\n            function($v) { $v != null }\n    )];\n\n    {\n        \"externalId\" : $.id,\n        \"filters\": $count($tfilters) > 0 ? $tfilters : []\n    } \n)\n",
                "restApiIntegrationContext": "API_REQUEST_BODY"
              }
            ],
            "jsonDataType": "OBJECT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": true,
          "method": "POST",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "https://engexp-chatbot-integration-api.prod.joveo.com/v2/sources/${sourceId}/job-filters",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": {
            "requestBody": "${body}"
          },
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": []
        }
      ]
    },
    {
      "dataModel": "JOB",
      "integrationType": "REST_API",
      "integrations": [
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-get-all-postings",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "content",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(content)"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/v1/companies/${companyIdentity}/postings",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": {
            "type": "OffsetConfig",
            "limitKey": "limit",
            "limitValue": 100,
            "offsetValue": "0",
            "offsetKey": "offset",
            "offsetJsonataExpression": "(content=null or $count(content)=0) ? \"\" : offset + limit"
          },
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": []
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-get-posting",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(jobId)"
            },
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(jobAdId)"
            },
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(name)"
            },
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(uuid)"
            },
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(refNumber)"
            },
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(applyUrl)"
            },
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(jobAd) and $exists(jobAd.sections) and ($exists(jobAd.sections.jobDescription) or $exists(jobAd.sections.qualifications)) and ($exists(jobAd.sections.jobDescription.title) or $exists(jobAd.sections.qualifications.title)) and ($exists(jobAd.sections.jobDescription.text) or $exists(jobAd.sections.qualifications.text))"
            }
          ],
          "dataModelTarget": {
            "dataModelJsonataExpression": "(\n  $transformJob := function($input) {\n    {\n      \"atsJobId\": $input.jobAdId,\n      \"refNumber\": $input.refNumber,\n      \"title\": $input.name,\n      \"description\": \n        ($exists($input.jobAd.sections.jobDescription.text) ? \n          (\"<h2>\" & $input.jobAd.sections.jobDescription.title & \"</h2>\" & $input.jobAd.sections.jobDescription.text) : \"\"\n        ) &\n        ($exists($input.jobAd.sections.qualifications.text) ? \n          (\"<h2>\" & $input.jobAd.sections.qualifications.title & \"</h2>\" & $input.jobAd.sections.qualifications.text) : \"\"),\n      \"url\": $input.applyUrl,\n      \"locations\": $input.location != null ? [\n        {\n          \"isPrimary\": true,\n          \"country\": $input.location.country,\n          \"state\": $input.location.region=\"REMOTE\" ? \"Remote\" : $input.location.region,\n          \"city\": $input.location.city,\n          \"customFields\": {\n            \"location\": $input.location\n          }\n        }\n      ] : [],\n      \"department\": $input.department != null ? $input.department.label : null,\n      \"status\": ($exists($input.active) and $input.active=true) ? \"OPEN\" : \"CLOSED\",\n      \"positionCategory\": $input.positionCategory != null ? $input.positionCategory.label : null,\n      \"positionLevel\": $input.experienceLevel != null ? $input.experienceLevel.label : null,\n      \"remoteType\": $input.typeOfEmployment != null ? $input.typeOfEmployment.label : null,\n      \"company\": $input.company != null ? $input.company.name : null,\n      \"createdDate\": $now(),\n      \"insertedAt\": $now(),\n      \"updatedAt\": $now(),\n      \"customFields\": $merge([\n        {\n          \"company\": $input.company.identifier,\n          \"industryId\": $input.industry.id,\n          \"functionId\": $input.positionCategory.id,\n          \"experienceLevelId\": $input.experienceLevel.id,\n          \"typeOfEmploymentId\": $input.typeOfEmployment.id,\n          \"language\": $input.language.code,\n          \"customConfig\": $exists($input.customField) ? $merge([\n            $map($input.customField, function($cf) {\n              { ($cf.fieldId): $cf.valueId }\n            })\n          ]) : {}\n        },\n        $exists($input.customField) ? $merge([\n          $map($input.customField, function($cf) {\n            { ($cf.fieldId): $cf.valueId }\n          })\n        ]) : {},\n        $exists($input.customField) ? $merge([\n          $map($input.customField, function($cf) {\n            { ($replace($lowercase($cf.fieldLabel), /\\s+/, \"_\")): $cf.valueLabel }\n          })\n        ]) : {}\n      ])\n    }\n  };\n\n  $attributes := $keys($);\n\n  $posting := $merge([\n    $map($attributes, function($attribute) {\n      ($attribute = \"function\") ? {\"positionCategory\": $lookup($, $attribute)} : { $attribute: $lookup($, $attribute) }\n    })\n  ]);\n\n  $transformJob($posting)\n)\n",
            "targetFields": [
              "JOVEO_JOB_ID",
              "JOVEO_JOB_CUSTOMER_ID",
              "ATS_JOB_ID",
              "ATS_JOB_REF_NUMBER",
              "ATS_JOB_TITLE",
              "ATS_JOB_DESCRIPTION",
              "ATS_JOB_URL",
              "ATS_JOB_LOCATIONS",
              "ATS_JOB_DEPARTMENT",
              "ATS_JOB_STATUS",
              "ATS_JOB_POSITION_CATEGORY",
              "ATS_JOB_POSITION_LEVEL",
              "ATS_JOB_REMOTE_TYPE",
              "ATS_JOB_COMPANY",
              "ATS_JOB_RECRUITERS",
              "ATS_JOB_HIRING_MANAGERS",
              "ATS_JOB_CREATED_DATE",
              "ATS_JOB_LAST_UPDATED_DATE",
              "ATS_JOB_START_DATE",
              "ATS_JOB_END_DATE",
              "ATS_JOB_INSERTED_AT",
              "ATS_JOB_UPDATED_AT",
              "ATS_JOB_CUSTOM_FIELDS",
              "ATS_JOB_IS_DELETED",
              "ATS_JOB_AUDIT"
            ],
            "targetOperation": "UPSERT"
          },
          "integrationDependency": {
            "dependentIntegrationId": "sr-get-all-postings",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "postingId",
                "jsonataExpression": "[$map(content, function($v) { $v.jobAdId })]",
                "restApiIntegrationContext": "API_PATH"
              }
            ],
            "jsonDataType": "ARRAY_OF_PRIMITIVES",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": true,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/v1/companies/${companyIdentity}/postings/${postingId}",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": []
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-get-ondemand-questions",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$not($exists(data)) or $exists(data.questions)"
            }
          ],
          "dataModelTarget": {
            "dataModelJsonataExpression": "{\n    \"atsJobId\": \"${atsJobId}\",\n    \"refNumber\": \"${atsRefNumber}\",\n    \"customFields\": {\n        \"questions\": data.questions\n    }\n}",
            "targetFields": [
              "JOVEO_JOB_ID",
              "JOVEO_JOB_CUSTOMER_ID",
              "ATS_JOB_ID",
              "ATS_JOB_REF_NUMBER",
              "ATS_JOB_UPDATED_AT",
              "ATS_JOB_CUSTOM_FIELDS",
              "ATS_JOB_AUDIT"
            ],
            "targetOperation": "UPDATE"
          },
          "integrationDependency": {
            "dependentIntegrationId": "sr-get-posting",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "atsJobId",
                "jsonataExpression": "jobAdId",
                "restApiIntegrationContext": "API_PATH"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "atsJobId",
                "jsonataExpression": "jobAdId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "atsRefNumber",
                "jsonataExpression": "refNumber",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": true,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "http://ats-unified-apis.prod.joveo.com:8080/v1/unified-apis/passthrough/ats-customer/${joveoCustomerId}/unified-jobs/${atsJobId}/questions",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "active=true"
            }
          ]
        }
      ]
    },
    {
      "dataModel": "CANDIDATE_QUESTION",
      "integrationType": "REST_API_RESPONSE_HANDLER",
      "integrations": [
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-community-screening-questions-to-joveo-questions",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2"
          ],
          "apiPath": "/community-apply-api/communities/${communityId}/configuration",
          "headers": {},
          "queryParams": {
            "conditionalsIncluded": "true"
          },
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [
            {
              "statusCode": 0,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "true"
                }
              ],
              "jsonataConvertorExpression": "{\n    \"data\": {\"questions\": (\n    $inputType := function($input) { $input=\"INPUT_TEXT\" ? \"TEXT\": $input=\"TEXT\" ? \"TEXT\": $input=\"SINGLE_SELECT\" ? \"SELECT\": $input=\"MULTI_SELECT\" ? \"SELECT\": $input=\"RADIO\" ? \"RADIO\": $input=\"CHECKBOX\" ? \"CHECKBOX\":\n    $input=\"TEXTAREA\"? \"TEXT_AREA\": $input=\"INFORMATION\" ? \"LABEL\": \"UNKNOWN\"\n        };\n    $getPrivacyPolicyUrl := function() {\n        (\n            $privacyPolicies := sr_get_community_apply_questions[0].privacyPolicies;\n\n            ($exists($privacyPolicies) = false or $privacyPolicies = null or $count($privacyPolicies) = 0) ? ''\n            : ($count([$privacyPolicies[orgName!='SmartRecruiters'].url]) > 0 ? [$privacyPolicies[orgName!='SmartRecruiters'].url][0]\n            : $privacyPolicies[0].url)\n        )\n    };\n\n    $consentQuestionObj := function($consent) {\n            {\n                \"type\": \"QUESTION\",\n                \"id\": $consent.scope,\n                \"label\": $getPrivacyPolicyUrl(),\n                \"field\": \"additionalFields.\" & \"consentQuestion_\" & $consent.scope,\n                \"inputType\": $inputType(\"CHECKBOX\"),\n                \"isMultiValue\": false,\n                \"properties\": {\n                    \"isMandatory\": $consent.required\n                },\n                \"inputOptionList\": [\n                    {\n                        \"label\": $consent.label,\n                        \"value\": \"true\"\n                    }\n                ]\n            }\n        };\n\n    $consentsQuestionsArray := [$map(sr_get_community_apply_questions[0].consentSettings.scopes, function($scope) {\n        $consentQuestionObj($scope)\n    })];\n\n    $builUcpQuestions := function() {\n        (\n            $firstName := $eval(\"{\\n    \\\"id\\\": \\\"f1288302-354e-4eca-b4e8-907523585505\\\",\\n    \\\"label\\\": \\\"First Name\\\",\\n    \\\"isMultiValue\\\": false,\\n    \\\"field\\\": \\\"firstName\\\",\\n    \\\"inputType\\\": \\\"TEXT\\\",\\n    \\\"properties\\\": {\\n        \\\"placeholder\\\": null,\\n        \\\"minInstances\\\": 1,\\n        \\\"maxInstances\\\": 1,\\n        \\\"isMandatory\\\": $questions.fieldSets.firstAndLastName.required,\\n        \\\"comment\\\": null,\\n        \\\"searchCapability\\\": false,\\n        \\\"searchable\\\": null,\\n        \\\"readOnly\\\": null,\\n        \\\"allowManual\\\": null,\\n        \\\"format\\\": null,\\n        \\\"maxSize\\\": 0,\\n        \\\"maxFiles\\\": null,\\n        \\\"rows\\\": null,\\n        \\\"fullWidth\\\": null,\\n        \\\"mimeTypes\\\": null\\n    },\\n    \\\"inputOptionList\\\": null,\\n    \\\"inputValidation\\\": {\\n        \\\"regex\\\": [\\n            {\\n                \\\"value\\\": \\\"^(?! )[a-zA-ZÀ-ÖØ-öø-ÿ '-.]*(?<! )$\\\",\\n                \\\"error\\\": \\\"Please enter a valid first name.\\\"\\n            }\\n        ],\\n        \\\"minLength\\\": 2,\\n        \\\"maxLength\\\": 100,\\n        \\\"minDate\\\": null,\\n        \\\"maxDate\\\": null,\\n        \\\"minValue\\\": null,\\n        \\\"maxValue\\\": null,\\n        \\\"validationType\\\": null,\\n        \\\"minSelections\\\": null,\\n        \\\"maxSelections\\\": null\\n    },\\n    \\\"dependencyCriteria\\\": null,\\n    \\\"type\\\": \\\"QUESTION\\\"\\n}\") ;\n            $firstNameWithProp := $firstName = null ? null : $merge([$firstName, {\n                \"properties\": {\n                    \"placeholder\": null,\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": true,\n                    \"comment\": null,\n                    \"searchCapability\": false,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": 0,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n\n            $lastName :=  $eval(\"{\\n    \\\"id\\\": \\\"28162b01-03ca-499f-85c5-9d80d11799ff\\\",\\n    \\\"label\\\": \\\"Last Name\\\",\\n    \\\"isMultiValue\\\": false,\\n    \\\"field\\\": \\\"lastName\\\",\\n    \\\"inputType\\\": \\\"TEXT\\\",\\n    \\\"properties\\\": {\\n        \\\"placeholder\\\": null,\\n        \\\"minInstances\\\": 1,\\n        \\\"maxInstances\\\": 1,\\n        \\\"isMandatory\\\": $questions.fieldSets.firstAndLastName.required,\\n        \\\"comment\\\": null,\\n        \\\"searchCapability\\\": false,\\n        \\\"searchable\\\": null,\\n        \\\"readOnly\\\": null,\\n        \\\"allowManual\\\": null,\\n        \\\"format\\\": null,\\n        \\\"maxSize\\\": 100,\\n        \\\"maxFiles\\\": null,\\n        \\\"rows\\\": null,\\n        \\\"fullWidth\\\": null,\\n        \\\"mimeTypes\\\": null\\n    },\\n    \\\"inputOptionList\\\": null,\\n    \\\"inputValidation\\\": {\\n        \\\"regex\\\": [\\n            {\\n                \\\"value\\\": \\\"^(?! )[a-zA-ZÀ-ÖØ-öø-ÿ '-.]*(?<! )$\\\",\\n                \\\"error\\\": \\\"Please enter a valid last name.\\\"\\n            }\\n        ],\\n        \\\"minLength\\\": 2,\\n        \\\"maxLength\\\": 100,\\n        \\\"minDate\\\": null,\\n        \\\"maxDate\\\": null,\\n        \\\"minValue\\\": null,\\n        \\\"maxValue\\\": null,\\n        \\\"validationType\\\": null,\\n        \\\"minSelections\\\": null,\\n        \\\"maxSelections\\\": null\\n    },\\n    \\\"dependencyCriteria\\\": null,\\n    \\\"type\\\": \\\"QUESTION\\\"\\n}\") ;\n            $lastNameWithProp := $lastName = null ? null : $merge([$lastName, {\n                \"properties\": {\n                    \"placeholder\": null,\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": true,\n                    \"comment\": null,\n                    \"searchCapability\": false,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": 100,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n\n            $email := $eval(\"{\\n    \\\"id\\\": \\\"bbf87365-6893-48c4-b427-c547ee42e9c6\\\",\\n    \\\"label\\\": \\\"Email\\\",\\n    \\\"isMultiValue\\\": false,\\n    \\\"field\\\": \\\"email\\\",\\n    \\\"inputType\\\": \\\"TEXT\\\",\\n    \\\"properties\\\": {\\n        \\\"placeholder\\\": null,\\n        \\\"minInstances\\\": 1,\\n        \\\"maxInstances\\\": 1,\\n        \\\"isMandatory\\\": $questions.fieldSets.email.required,\\n        \\\"comment\\\": null,\\n        \\\"searchCapability\\\": false,\\n        \\\"searchable\\\": null,\\n        \\\"readOnly\\\": null,\\n        \\\"allowManual\\\": null,\\n        \\\"format\\\": null,\\n        \\\"maxSize\\\": 100,\\n        \\\"maxFiles\\\": null,\\n        \\\"rows\\\": null,\\n        \\\"fullWidth\\\": null,\\n        \\\"mimeTypes\\\": null\\n    },\\n    \\\"inputOptionList\\\": null,\\n    \\\"inputValidation\\\": {\\n        \\\"regex\\\": [\\n            {\\n                \\\"value\\\": \\\"^(?=.{1,64}@.{1,256}$)\\\\\\\\w+([\\\\\\\\.+-]?\\\\\\\\w+)*@\\\\\\\\w+([\\\\\\\\.-]?\\\\\\\\w+)*(\\\\\\\\.\\\\\\\\w{2,})+$\\\",\\n                \\\"error\\\": \\\"Invalid Email\\\"\\n            }\\n        ],\\n        \\\"minLength\\\": 0,\\n        \\\"maxLength\\\": 100,\\n        \\\"minDate\\\": null,\\n        \\\"maxDate\\\": null,\\n        \\\"minValue\\\": null,\\n        \\\"maxValue\\\": null,\\n        \\\"validationType\\\": null,\\n        \\\"minSelections\\\": null,\\n        \\\"maxSelections\\\": null\\n    },\\n    \\\"dependencyCriteria\\\": null,\\n    \\\"type\\\": \\\"QUESTION\\\"\\n}\");\n            $emailWithProp := $email = null ? null : $merge([$email, {\n                \"properties\": {\n                    \"placeholder\": null,\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": true,\n                    \"comment\": null,\n                    \"searchCapability\": false,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": 100,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n\n            $placeOfResidence := $eval(\"{\\\"id\\\":\\\"861449fc-8284-450a-9b2e-5152b8556834\\\",\\\"label\\\":\\\"City\\\",\\\"isMultiValue\\\":false,\\\"field\\\":\\\"city\\\",\\\"defaultValue\\\":null,\\\"inputType\\\":\\\"TEXT\\\",\\\"properties\\\":{},\\\"inputOptionList\\\":null,\\\"inputValidation\\\":null,\\\"dependencyCriteria\\\":null,\\\"type\\\":\\\"QUESTION\\\"}\");\n            $placeOfResidenceWithProp := $placeOfResidence = null ? null : $merge([$placeOfResidence, {\n                \"properties\": {\n                    \"placeholder\": null,\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": false,\n                    \"comment\": null,\n                    \"searchCapability\": true,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": null,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n\n            $phoneNumber :=  $eval(\"{\\n    \\\"id\\\": \\\"17030226-75ed-4187-a73d-afe116473950\\\",\\n    \\\"label\\\": \\\"Phone Number\\\",\\n    \\\"isMultiValue\\\": false,\\n    \\\"field\\\": \\\"phoneNumber\\\",\\n    \\\"inputType\\\": \\\"PHONE\\\",\\n    \\\"properties\\\": {\\n        \\\"placeholder\\\": \\\"Phone Number\\\",\\n        \\\"minInstances\\\": 1,\\n        \\\"maxInstances\\\": 1,\\n        \\\"isMandatory\\\": $questions.fieldSets.phoneNumber.required,\\n        \\\"comment\\\": null,\\n        \\\"searchCapability\\\": null,\\n        \\\"searchable\\\": null,\\n        \\\"readOnly\\\": null,\\n        \\\"allowManual\\\": null,\\n        \\\"format\\\": null,\\n        \\\"maxSize\\\": 100,\\n        \\\"maxFiles\\\": null,\\n        \\\"rows\\\": null,\\n        \\\"fullWidth\\\": null,\\n        \\\"mimeTypes\\\": null\\n    },\\n    \\\"inputOptionList\\\": [\\n        {\\n            \\\"label\\\": \\\"Afghanistan (+93)\\\",\\n            \\\"value\\\": \\\"AF (+93)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Åland Islands (+358)\\\",\\n            \\\"value\\\": \\\"AX (+358)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Albania (+355)\\\",\\n            \\\"value\\\": \\\"AL (+355)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Algeria (+213)\\\",\\n            \\\"value\\\": \\\"DZ (+213)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"American Samoa (+1)\\\",\\n            \\\"value\\\": \\\"AS (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Andorra (+376)\\\",\\n            \\\"value\\\": \\\"AD (+376)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Angola (+244)\\\",\\n            \\\"value\\\": \\\"AO (+244)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Anguilla (+1)\\\",\\n            \\\"value\\\": \\\"AI (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Antigua and Barbuda (+1)\\\",\\n            \\\"value\\\": \\\"AG (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Argentina (+54)\\\",\\n            \\\"value\\\": \\\"AR (+54)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Armenia (+374)\\\",\\n            \\\"value\\\": \\\"AM (+374)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Aruba (+297)\\\",\\n            \\\"value\\\": \\\"AW (+297)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Australia (+61)\\\",\\n            \\\"value\\\": \\\"AU (+61)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Austria (+43)\\\",\\n            \\\"value\\\": \\\"AT (+43)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Azerbaijan (+994)\\\",\\n            \\\"value\\\": \\\"AZ (+994)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bahamas (+1)\\\",\\n            \\\"value\\\": \\\"BS (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bahrain (+973)\\\",\\n            \\\"value\\\": \\\"BH (+973)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bangladesh (+880)\\\",\\n            \\\"value\\\": \\\"BD (+880)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Barbados (+1)\\\",\\n            \\\"value\\\": \\\"BB (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Belarus (+375)\\\",\\n            \\\"value\\\": \\\"BY (+375)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Belgium (+32)\\\",\\n            \\\"value\\\": \\\"BE (+32)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Belize (+501)\\\",\\n            \\\"value\\\": \\\"BZ (+501)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Benin (+229)\\\",\\n            \\\"value\\\": \\\"BJ (+229)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bermuda (+1)\\\",\\n            \\\"value\\\": \\\"BM (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bhutan (+975)\\\",\\n            \\\"value\\\": \\\"BT (+975)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bosnia and Herzegovina (+387)\\\",\\n            \\\"value\\\": \\\"BA (+387)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Botswana (+267)\\\",\\n            \\\"value\\\": \\\"BW (+267)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Brazil (+55)\\\",\\n            \\\"value\\\": \\\"BR (+55)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"British Indian Ocean Territory (+246)\\\",\\n            \\\"value\\\": \\\"IO (+246)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Bulgaria (+359)\\\",\\n            \\\"value\\\": \\\"BG (+359)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Burkina Faso (+226)\\\",\\n            \\\"value\\\": \\\"BF (+226)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Burundi (+257)\\\",\\n            \\\"value\\\": \\\"BI (+257)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cambodia (+855)\\\",\\n            \\\"value\\\": \\\"KH (+855)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cameroon (+237)\\\",\\n            \\\"value\\\": \\\"CM (+237)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Canada (+1)\\\",\\n            \\\"value\\\": \\\"CA (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cayman Islands (+1)\\\",\\n            \\\"value\\\": \\\"KY (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Central African Republic (+236)\\\",\\n            \\\"value\\\": \\\"CF (+236)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Chad (+235)\\\",\\n            \\\"value\\\": \\\"TD (+235)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Chile (+56)\\\",\\n            \\\"value\\\": \\\"CL (+56)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"China (+86)\\\",\\n            \\\"value\\\": \\\"CN (+86)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Christmas Island (+61)\\\",\\n            \\\"value\\\": \\\"CX (+61)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cocos (Keeling) Islands (+61)\\\",\\n            \\\"value\\\": \\\"CC (+61)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Colombia (+57)\\\",\\n            \\\"value\\\": \\\"CO (+57)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Comoros (+269)\\\",\\n            \\\"value\\\": \\\"KM (+269)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Congo (+242)\\\",\\n            \\\"value\\\": \\\"CG (+242)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cook Islands (+682)\\\",\\n            \\\"value\\\": \\\"CK (+682)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Costa Rica (+506)\\\",\\n            \\\"value\\\": \\\"CR (+506)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Croatia (+385)\\\",\\n            \\\"value\\\": \\\"HR (+385)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cuba (+53)\\\",\\n            \\\"value\\\": \\\"CU (+53)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Cyprus (+357)\\\",\\n            \\\"value\\\": \\\"CY (+357)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Czech Republic (+420)\\\",\\n            \\\"value\\\": \\\"CZ (+420)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Denmark (+45)\\\",\\n            \\\"value\\\": \\\"DK (+45)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Djibouti (+253)\\\",\\n            \\\"value\\\": \\\"DJ (+253)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Dominica (+1)\\\",\\n            \\\"value\\\": \\\"DM (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Dominican Republic (+1)\\\",\\n            \\\"value\\\": \\\"DO (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Ecuador (+593)\\\",\\n            \\\"value\\\": \\\"EC (+593)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Egypt (+20)\\\",\\n            \\\"value\\\": \\\"EG (+20)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"El Salvador (+503)\\\",\\n            \\\"value\\\": \\\"SV (+503)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Equatorial Guinea (+240)\\\",\\n            \\\"value\\\": \\\"GQ (+240)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Eritrea (+291)\\\",\\n            \\\"value\\\": \\\"ER (+291)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Estonia (+372)\\\",\\n            \\\"value\\\": \\\"EE (+372)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Ethiopia (+251)\\\",\\n            \\\"value\\\": \\\"ET (+251)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Faroe Islands (+298)\\\",\\n            \\\"value\\\": \\\"FO (+298)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Fiji (+679)\\\",\\n            \\\"value\\\": \\\"FJ (+679)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Finland (+358)\\\",\\n            \\\"value\\\": \\\"FI (+358)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"France (+33)\\\",\\n            \\\"value\\\": \\\"FR (+33)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"French Guiana (+594)\\\",\\n            \\\"value\\\": \\\"GF (+594)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"French Polynesia (+689)\\\",\\n            \\\"value\\\": \\\"PF (+689)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Gabon (+241)\\\",\\n            \\\"value\\\": \\\"GA (+241)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Gambia (+220)\\\",\\n            \\\"value\\\": \\\"GM (+220)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Georgia (+995)\\\",\\n            \\\"value\\\": \\\"GE (+995)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Germany (+49)\\\",\\n            \\\"value\\\": \\\"DE (+49)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Ghana (+233)\\\",\\n            \\\"value\\\": \\\"GH (+233)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Gibraltar (+350)\\\",\\n            \\\"value\\\": \\\"GI (+350)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Greece (+30)\\\",\\n            \\\"value\\\": \\\"GR (+30)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Greenland (+299)\\\",\\n            \\\"value\\\": \\\"GL (+299)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Grenada (+1)\\\",\\n            \\\"value\\\": \\\"GD (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guadeloupe (+590)\\\",\\n            \\\"value\\\": \\\"GP (+590)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guam (+1)\\\",\\n            \\\"value\\\": \\\"GU (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guatemala (+502)\\\",\\n            \\\"value\\\": \\\"GT (+502)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guernsey (+44)\\\",\\n            \\\"value\\\": \\\"GG (+44)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guinea (+224)\\\",\\n            \\\"value\\\": \\\"GN (+224)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guinea-Bissau (+245)\\\",\\n            \\\"value\\\": \\\"GW (+245)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Guyana (+592)\\\",\\n            \\\"value\\\": \\\"GY (+592)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Haiti (+509)\\\",\\n            \\\"value\\\": \\\"HT (+509)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Holy See (Vatican City State) (+39)\\\",\\n            \\\"value\\\": \\\"VA (+39)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Honduras (+504)\\\",\\n            \\\"value\\\": \\\"HN (+504)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Hong Kong (+852)\\\",\\n            \\\"value\\\": \\\"HK (+852)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Hungary (+36)\\\",\\n            \\\"value\\\": \\\"HU (+36)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Iceland (+354)\\\",\\n            \\\"value\\\": \\\"IS (+354)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"India (+91)\\\",\\n            \\\"value\\\": \\\"IN (+91)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Indonesia (+62)\\\",\\n            \\\"value\\\": \\\"ID (+62)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Iraq (+964)\\\",\\n            \\\"value\\\": \\\"IQ (+964)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Ireland (+353)\\\",\\n            \\\"value\\\": \\\"IE (+353)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Isle of Man (+44)\\\",\\n            \\\"value\\\": \\\"IM (+44)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Israel (+972)\\\",\\n            \\\"value\\\": \\\"IL (+972)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Italy (+39)\\\",\\n            \\\"value\\\": \\\"IT (+39)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Jamaica (+1)\\\",\\n            \\\"value\\\": \\\"JM (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Japan (+81)\\\",\\n            \\\"value\\\": \\\"JP (+81)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Jersey (+44)\\\",\\n            \\\"value\\\": \\\"JE (+44)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Jordan (+962)\\\",\\n            \\\"value\\\": \\\"JO (+962)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kazakhstan (+7)\\\",\\n            \\\"value\\\": \\\"KZ (+7)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kenya (+254)\\\",\\n            \\\"value\\\": \\\"KE (+254)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kiribati (+686)\\\",\\n            \\\"value\\\": \\\"KI (+686)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kosovo (+383)\\\",\\n            \\\"value\\\": \\\"XK (+383)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kosovo (+377)\\\",\\n            \\\"value\\\": \\\"XK (+377)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kosovo (+381)\\\",\\n            \\\"value\\\": \\\"XK (+381)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kosovo (+386)\\\",\\n            \\\"value\\\": \\\"XK (+386)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kuwait (+965)\\\",\\n            \\\"value\\\": \\\"KW (+965)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Kyrgyzstan (+996)\\\",\\n            \\\"value\\\": \\\"KG (+996)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Laos (+856)\\\",\\n            \\\"value\\\": \\\"LA (+856)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Latvia (+371)\\\",\\n            \\\"value\\\": \\\"LV (+371)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Lebanon (+961)\\\",\\n            \\\"value\\\": \\\"LB (+961)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Lesotho (+266)\\\",\\n            \\\"value\\\": \\\"LS (+266)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Liberia (+231)\\\",\\n            \\\"value\\\": \\\"LR (+231)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Liechtenstein (+423)\\\",\\n            \\\"value\\\": \\\"LI (+423)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Lithuania (+370)\\\",\\n            \\\"value\\\": \\\"LT (+370)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Luxembourg (+352)\\\",\\n            \\\"value\\\": \\\"LU (+352)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Macao (+853)\\\",\\n            \\\"value\\\": \\\"MO (+853)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Madagascar (+261)\\\",\\n            \\\"value\\\": \\\"MG (+261)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Malawi (+265)\\\",\\n            \\\"value\\\": \\\"MW (+265)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Malaysia (+60)\\\",\\n            \\\"value\\\": \\\"MY (+60)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Maldives (+960)\\\",\\n            \\\"value\\\": \\\"MV (+960)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mali (+223)\\\",\\n            \\\"value\\\": \\\"ML (+223)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Malta (+356)\\\",\\n            \\\"value\\\": \\\"MT (+356)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Marshall Islands (+692)\\\",\\n            \\\"value\\\": \\\"MH (+692)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Martinique (+596)\\\",\\n            \\\"value\\\": \\\"MQ (+596)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mauritania (+222)\\\",\\n            \\\"value\\\": \\\"MR (+222)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mauritius (+230)\\\",\\n            \\\"value\\\": \\\"MU (+230)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mayotte (+262)\\\",\\n            \\\"value\\\": \\\"YT (+262)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mexico (+52)\\\",\\n            \\\"value\\\": \\\"MX (+52)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Moldova (+373)\\\",\\n            \\\"value\\\": \\\"MD (+373)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Monaco (+377)\\\",\\n            \\\"value\\\": \\\"MC (+377)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mongolia (+976)\\\",\\n            \\\"value\\\": \\\"MN (+976)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Montenegro (+382)\\\",\\n            \\\"value\\\": \\\"ME (+382)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Montserrat (+1)\\\",\\n            \\\"value\\\": \\\"MS (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Morocco (+212)\\\",\\n            \\\"value\\\": \\\"MA (+212)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Mozambique (+258)\\\",\\n            \\\"value\\\": \\\"MZ (+258)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Myanmar (+95)\\\",\\n            \\\"value\\\": \\\"MM (+95)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Namibia (+264)\\\",\\n            \\\"value\\\": \\\"NA (+264)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Nauru (+674)\\\",\\n            \\\"value\\\": \\\"NR (+674)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Nepal (+977)\\\",\\n            \\\"value\\\": \\\"NP (+977)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Netherlands (+31)\\\",\\n            \\\"value\\\": \\\"NL (+31)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"New Caledonia (+687)\\\",\\n            \\\"value\\\": \\\"NC (+687)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"New Zealand (+64)\\\",\\n            \\\"value\\\": \\\"NZ (+64)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Nicaragua (+505)\\\",\\n            \\\"value\\\": \\\"NI (+505)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Niger (+227)\\\",\\n            \\\"value\\\": \\\"NE (+227)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Nigeria (+234)\\\",\\n            \\\"value\\\": \\\"NG (+234)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Niue (+683)\\\",\\n            \\\"value\\\": \\\"NU (+683)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Norfolk Island (+672)\\\",\\n            \\\"value\\\": \\\"NF (+672)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Northern Mariana Islands (+1)\\\",\\n            \\\"value\\\": \\\"MP (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Norway (+47)\\\",\\n            \\\"value\\\": \\\"NO (+47)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Oman (+968)\\\",\\n            \\\"value\\\": \\\"OM (+968)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Pakistan (+92)\\\",\\n            \\\"value\\\": \\\"PK (+92)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Palau (+680)\\\",\\n            \\\"value\\\": \\\"PW (+680)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Panama (+507)\\\",\\n            \\\"value\\\": \\\"PA (+507)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Papua New Guinea (+675)\\\",\\n            \\\"value\\\": \\\"PG (+675)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Paraguay (+595)\\\",\\n            \\\"value\\\": \\\"PY (+595)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Peru (+51)\\\",\\n            \\\"value\\\": \\\"PE (+51)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Philippines (+63)\\\",\\n            \\\"value\\\": \\\"PH (+63)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Poland (+48)\\\",\\n            \\\"value\\\": \\\"PL (+48)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Portugal (+351)\\\",\\n            \\\"value\\\": \\\"PT (+351)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Puerto Rico (+1)\\\",\\n            \\\"value\\\": \\\"PR (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Qatar (+974)\\\",\\n            \\\"value\\\": \\\"QA (+974)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Reunion (+262)\\\",\\n            \\\"value\\\": \\\"RE (+262)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Romania (+40)\\\",\\n            \\\"value\\\": \\\"RO (+40)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Rwanda (+250)\\\",\\n            \\\"value\\\": \\\"RW (+250)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Barthelemy (+590)\\\",\\n            \\\"value\\\": \\\"BL (+590)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Kitts and Nevis (+869)\\\",\\n            \\\"value\\\": \\\"KN (+869)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Lucia (+1)\\\",\\n            \\\"value\\\": \\\"LC (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Martin (+590)\\\",\\n            \\\"value\\\": \\\"MF (+590)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Pierre and Miquelon (+508)\\\",\\n            \\\"value\\\": \\\"PM (+508)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saint Vincent and the Grenadines (+1)\\\",\\n            \\\"value\\\": \\\"VC (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Samoa (+685)\\\",\\n            \\\"value\\\": \\\"WS (+685)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"San Marino (+378)\\\",\\n            \\\"value\\\": \\\"SM (+378)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Sao Tome and Principe (+239)\\\",\\n            \\\"value\\\": \\\"ST (+239)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Saudi Arabia (+966)\\\",\\n            \\\"value\\\": \\\"SA (+966)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Senegal (+221)\\\",\\n            \\\"value\\\": \\\"SN (+221)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Serbia (+381)\\\",\\n            \\\"value\\\": \\\"RS (+381)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Seychelles (+248)\\\",\\n            \\\"value\\\": \\\"SC (+248)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Sierra Leone (+232)\\\",\\n            \\\"value\\\": \\\"SL (+232)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Singapore (+65)\\\",\\n            \\\"value\\\": \\\"SG (+65)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Slovakia (+421)\\\",\\n            \\\"value\\\": \\\"SK (+421)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Slovenia (+386)\\\",\\n            \\\"value\\\": \\\"SI (+386)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Solomon Islands (+677)\\\",\\n            \\\"value\\\": \\\"SB (+677)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Somalia (+252)\\\",\\n            \\\"value\\\": \\\"SO (+252)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"South Africa (+27)\\\",\\n            \\\"value\\\": \\\"ZA (+27)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"South Sudan (+211)\\\",\\n            \\\"value\\\": \\\"SS (+211)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Spain (+34)\\\",\\n            \\\"value\\\": \\\"ES (+34)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Sri Lanka (+94)\\\",\\n            \\\"value\\\": \\\"LK (+94)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Sudan (+249)\\\",\\n            \\\"value\\\": \\\"SD (+249)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Suri (+597)\\\",\\n            \\\"value\\\": \\\"SR (+597)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Svalbard and Jan Mayen (+47)\\\",\\n            \\\"value\\\": \\\"SJ (+47)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Swaziland (+268)\\\",\\n            \\\"value\\\": \\\"SZ (+268)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Sweden (+46)\\\",\\n            \\\"value\\\": \\\"SE (+46)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Switzerland (+41)\\\",\\n            \\\"value\\\": \\\"CH (+41)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Taiwan (+886)\\\",\\n            \\\"value\\\": \\\"TW (+886)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Tajikistan (+992)\\\",\\n            \\\"value\\\": \\\"TJ (+992)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Thailand (+66)\\\",\\n            \\\"value\\\": \\\"TH (+66)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Timor-Leste (+670)\\\",\\n            \\\"value\\\": \\\"TL (+670)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Togo (+228)\\\",\\n            \\\"value\\\": \\\"TG (+228)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Tokelau (+690)\\\",\\n            \\\"value\\\": \\\"TK (+690)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Tonga (+676)\\\",\\n            \\\"value\\\": \\\"TO (+676)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Trinidad and Tobago (+1)\\\",\\n            \\\"value\\\": \\\"TT (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Tunisia (+216)\\\",\\n            \\\"value\\\": \\\"TN (+216)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Turkey (+90)\\\",\\n            \\\"value\\\": \\\"TR (+90)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Turkmenistan (+993)\\\",\\n            \\\"value\\\": \\\"TM (+993)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Turks and Caicos Islands (+1)\\\",\\n            \\\"value\\\": \\\"TC (+1)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Tuvalu (+688)\\\",\\n            \\\"value\\\": \\\"TV (+688)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Uganda (+256)\\\",\\n            \\\"value\\\": \\\"UG (+256)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Ukraine (+380)\\\",\\n            \\\"value\\\": \\\"UA (+380)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"United Arab Emirates (+971)\\\",\\n            \\\"value\\\": \\\"AE (+971)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"United Kingdom (+44)\\\",\\n            \\\"value\\\": \\\"GB (+44)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Uruguay (+598)\\\",\\n            \\\"value\\\": \\\"UY (+598)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Uzbekistan (+998)\\\",\\n            \\\"value\\\": \\\"UZ (+998)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Vanuatu (+678)\\\",\\n            \\\"value\\\": \\\"VU (+678)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Vietnam (+84)\\\",\\n            \\\"value\\\": \\\"VN (+84)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Wallis and Futuna (+681)\\\",\\n            \\\"value\\\": \\\"WF (+681)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Yemen (+967)\\\",\\n            \\\"value\\\": \\\"YE (+967)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Zambia (+260)\\\",\\n            \\\"value\\\": \\\"ZM (+260)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"Zimbabwe (+263)\\\",\\n            \\\"value\\\": \\\"ZW (+263)\\\"\\n        },\\n        {\\n            \\\"label\\\": \\\"United States of America (+1)\\\",\\n            \\\"value\\\": \\\"US (+1)\\\"\\n        }\\n    ],\\n    \\\"inputValidation\\\": null,\\n    \\\"dependencyCriteria\\\": null,\\n    \\\"type\\\": \\\"QUESTION\\\"\\n}\");\n            $phoneNumberWithProp := $phoneNumber = null ? null : $merge([$phoneNumber, {\n                \"properties\": {\n                    \"placeholder\": \"Phone Number\",\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": false,\n                    \"comment\": null,\n                    \"searchCapability\": null,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": 100,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n            $linkedIn :=  $eval(\"{\\n          \\\"id\\\": \\\"e4b58d97-695f-4f5c-a48a-0265cf943e69\\\",\\n          \\\"label\\\": \\\"LinkedIn Profile\\\",\\n          \\\"isMultiValue\\\": false,\\n          \\\"field\\\": \\\"additionalFields.linkedIn\\\",\\n          \\\"inputType\\\": \\\"TEXT\\\",\\n          \\\"properties\\\": {\\n            \\\"placeholder\\\": \\\"LinkedIn Profile\\\",\\n            \\\"minInstances\\\": 1,\\n            \\\"maxInstances\\\": 1,\\n            \\\"isMandatory\\\": false,\\n            \\\"comment\\\": null,\\n            \\\"searchCapability\\\": false,\\n            \\\"searchable\\\": null,\\n            \\\"readOnly\\\": null,\\n            \\\"allowManual\\\": null,\\n            \\\"format\\\": null,\\n            \\\"maxSize\\\": 0,\\n            \\\"maxFiles\\\": null,\\n            \\\"rows\\\": null,\\n            \\\"fullWidth\\\": null,\\n            \\\"mimeTypes\\\": null\\n          },\\n          \\\"inputOptionList\\\": null,\\n          \\\"inputValidation\\\": {\\n            \\\"regex\\\": [\\n              {\\n                \\\"value\\\": \\\"^https?:\\\\\\\\/\\\\\\\\/(www\\\\\\\\.)?linkedin\\\\\\\\.com\\\\\\\\/in\\\\\\\\/[a-zA-Z0-9\\\\\\\\-_%]+\\\\\\\\/?$\\\",\\n                \\\"error\\\": \\\"Please enter a valid linkedIn profile.\\\"\\n              }\\n            ],\\n            \\\"minLength\\\": 2,\\n            \\\"maxLength\\\": 150,\\n            \\\"minDate\\\": null,\\n            \\\"maxDate\\\": null,\\n            \\\"minValue\\\": null,\\n            \\\"maxValue\\\": null,\\n            \\\"validationType\\\": null,\\n            \\\"minSelections\\\": null,\\n            \\\"maxSelections\\\": null\\n          },\\n          \\\"dependencyCriteria\\\": null,\\n          \\\"type\\\": \\\"QUESTION\\\"\\n        }\");\n            $linkedInWithProp := $linkedIn = null ? null : $merge([$linkedIn, {\n                \"properties\": {\n                    \"placeholder\": \"LinkedIn Profile\",\n                    \"minInstances\": 1,\n                    \"maxInstances\": 1,\n                    \"isMandatory\": true,\n                    \"comment\": null,\n                    \"searchCapability\": null,\n                    \"searchable\": null,\n                    \"readOnly\": null,\n                    \"allowManual\": null,\n                    \"format\": null,\n                    \"maxSize\": 100,\n                    \"maxFiles\": null,\n                    \"rows\": null,\n                    \"fullWidth\": null,\n                    \"mimeTypes\": null\n                }\n            }]);\n            [$filter([$firstNameWithProp, $lastNameWithProp, $emailWithProp, $placeOfResidenceWithProp, $phoneNumberWithProp,$linkedInWithProp], function($v) {\n                $v!=null\n            })]\n        )\n    };\n\n    $ucpQuestionsArray := $count(1) > 0 ? $builUcpQuestions() : [];\n    \n    {\n        \"ucpQuestions\": $ucpQuestionsArray,\n        \"consentQuestions\": $consentsQuestionsArray\n    }\n)},\n\"errors\": null\n}"
            }
          ],
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "false"
            }
          ]
        }
      ]
    },
    {
      "dataModel": "CANDIDATE",
      "integrationType": "WRITE_REST_API",
      "integrations": [
        {
          "type": "WriteApiIntegration",
          "integrationId": "sr-create-community-start-chain",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(inputData.candidate.firstName) and inputData.candidate.firstName != null and $exists(inputData.candidate.lastName) and inputData.candidate.lastName != null and $exists(inputData.candidate.email) and inputData.candidate.email != null"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false,
          "method": "POST",
          "authTypes": [
            "OAUTH_2"
          ],
          "apiPath": "/community-apply-api/communities/${communityId}/prospect",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "requestPayload": {
            "requestBody": "",
            "requestBodyConverter": []
          },
          "responseHandlers": [
            {
              "statusCode": 0,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "true"
                }
              ],
              "jsonataConvertorExpression": "{\"errorMessage\": \"Integration not executed because this is dummy integration to support dependency fields for next integration.\"}"
            }
          ],
          "headersInResponse": false,
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "false"
            }
          ]
        },
        {
          "type": "WriteApiIntegration",
          "integrationId": "sr-create-community-integration",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": {
            "dependentIntegrationId": "sr-create-community-start-chain",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "communityId",
                "jsonataExpression": "inputData.application.atsJobId",
                "restApiIntegrationContext": "API_PATH"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": false,
          "method": "POST",
          "authTypes": [
            "OAUTH_2"
          ],
          "apiPath": "/community-apply-api/communities/${communityId}/prospect",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "requestPayload": {
            "requestBody": "$merge([\n  {\n    \"firstName\": inputData.candidate.firstName,\n    \"lastName\": inputData.candidate.lastName,\n    \"email\": inputData.candidate.email,\n    \"sendWelcomeMessage\": true,\n    \"consentDecisions\": (\n      $isItConsent := function($id) {\n        $contains($id, \"consentQuestion_\")\n      };\n\n      $getConsentKey := function($id) {\n        $isItConsent($id) = true ? $split($id, \"consentQuestion_\")[1] : null\n      };\n\n      $fetchConsentValue := function($id) {\n        ($consentVal := $lookup($screeningQuestions.additionalFields, $id);\n        $consentVal = \"true\" ? true : false)\n      };\n\n      $screeningQuestions := inputData.candidate.customFields.questionAnswers;\n      $questionIds := $screeningQuestions = null ? [] : [$keys($screeningQuestions.additionalFields)];\n      $consentQuestions := $filter($questionIds, function($questionId) {\n        $isItConsent($questionId)\n      });\n      $consents := $count($consentQuestions) = 0 ? null : [$map($consentQuestions, function($id) {\n        {\n          $getConsentKey($id): $fetchConsentValue($id)\n        }\n      })];\n      $consents = null ? null : $merge($consents)\n    ),\n    \"language\": $not($exists(inputData.candidate.customFields.language)) ? \"en\" : inputData.candidate.customFields.language,\n    \"sourceId\": \"6732660b-8def-40da-8bea-fe3fb1d47aef\"\n  },\n  (\n    $phones := inputData.candidate.phoneNumbers;\n    ($phones = null or $count($phones) = 0 or $phones[0].phoneNumber = null or $phones[0].phoneNumber=\"\") ? {} : {\n      \"phoneNumber\": $phones[0].phoneNumber\n    }\n  ),\n\n  (\n    $city := inputData.candidate.address.city;\n    ($city != null) ? {\n      \"location\": {\n        \"city\": $city\n      }\n    } : {}\n  ),\n  (\n    $linkedIn := inputData.candidate.customFields.questionAnswers.additionalFields.linkedIn;\n    $exists($linkedIn) and $linkedIn != null and $linkedIn != \"\" ? {\n      \"web\": {\n        \"linkedIn\": $linkedIn\n      }\n    } : {}\n  )\n])",
            "requestBodyConverter": []
          },
          "responseHandlers": [
            {
              "statusCode": 200,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "$exists(profileId) and profileId != null"
                },
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "$exists(applicationId) and applicationId != null"
                }
              ],
              "jsonataConvertorExpression": "{  \"profileId\": profileId, \"applicationId\": applicationId}"
            },
            {
              "statusCode": 0,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "true"
                }
              ],
              "jsonataConvertorExpression": "{\"errorMessage\": $string($)}"
            }
          ],
          "headersInResponse": false,
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ]
        }
      ]
    },
    {
      "dataModel": "APPLICATION",
      "integrationType": "WRITE_API_RESPONSE_HANDLER",
      "integrations": [
        {
          "type": "WriteApiIntegration",
          "integrationId": "sr-application-api-response-handler-chain",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false,
          "method": "POST",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/v1/candidates",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "requestPayload": {
            "requestBody": "",
            "requestBodyConverter": []
          },
          "responseHandlers": [
            {
              "statusCode": 0,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "true"
                }
              ],
              "jsonataConvertorExpression": "{\n    \"data\": {\n        \"candidateId\": sr_create_application[0].candidateId,    \n        \"applicationId\": sr_create_application[0].applicationId\n    }\n}"
            }
          ],
          "headersInResponse": false,
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "false"
            }
          ]
        }
      ]
    },
    {
      "dataModel": "JOB",
      "integrationType": "WEBHOOK",
      "integrations": [
        {
          "type": "WebhookIntegration",
          "integrationId": "smart-recruiters-job-ad-change-event",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-get-posting",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$exists(jobAdId)"
            }
          ],
          "dataModelTarget": {
            "dataModelJsonataExpression": "(\n    $transformJob := function($input) {\n    {\n        \"atsJobId\": $input.jobAdId,\n        \"refNumber\":  ($exists($input.refNumber) and $input.refNumber!=null) ? $input.refNumber : \"UNKNOWN\",\n        \"title\":  ($exists($input.name) and $input.name!=null) ? $input.name : \"UNKNOWN\",\n        \"description\": ($exists($input.jobAd.sections.jobDescription.text) ? (\"<h2>\" & $input.jobAd.sections.jobDescription.title  & \"</h2>\" & $input.jobAd.sections.jobDescription.text) : \"\") & ($exists($input.jobAd.sections.qualifications.text) ? (\"<h2>\" & $input.jobAd.sections.qualifications.title  & \"</h2>\"  & $input.jobAd.sections.qualifications.text) : \"UNKNOWN\"),\n        \"url\": ($exists($input.applyUrl) and $input.applyUrl!=null) ? $input.applyUrl : \"UNKNOWN\",\n        \"locations\":$input.location != null ? [\n            {\n                \"isPrimary\": true,\n                \"country\": $input.location.country,\n                \"state\": $input.location.region=\"REMOTE\" ? \"Remote\" : $input.location.region,\n                \"city\": $input.location.city,\n                \"customFields\": {\n                    \"location\": $input.location\n                }\n            }\n        ] : [],\n        \"department\": $input.department != null ? $input.department.label : null,\n        \"status\": ($exists($input.active) and $input.active=true) ? \"OPEN\" : \"CLOSED\",\n        \"positionCategory\": $input.positionCategory != null ? $input.positionCategory.label : null,\n        \"positionLevel\": $input.experienceLevel != null ? $input.experienceLevel.label : null,\n        \"remoteType\": $input.typeOfEmployment != null ? $input.typeOfEmployment.label : null,\n        \"company\": $input.company != null ? $input.company.name : null,\n        \"createdDate\": $now(),\n        \"insertedAt\": $now(),\n        \"updatedAt\": $now(),\n        \"customFields\": $merge([\n                {\n                    \"company\": $input.company.identifier,\n                    \"industryId\": $input.industry.id,\n                    \"functionId\": $input.positionCategory.id,\n                    \"experienceLevelId\": $input.experienceLevel.id,\n                    \"typeOfEmploymentId\": $input.typeOfEmployment.id,\n                    \"language\": $input.language.code,\n                    \"customConfig\":$exists($input.customField) ? $merge([$map($input.customField, function($cf) {\n                    {\n                        ($cf.fieldId): $cf.valueId\n                    }\n                })]) : {}\n                },\n                $exists($input.customField) ? $merge([$map($input.customField, function($cf) {\n                    {\n                        ($cf.fieldId): $cf.valueId\n                    }\n                })]) : {},\n                $exists($input.customField) ? $merge([\n          $map($input.customField, function($cf) {\n            { ($replace($lowercase($cf.fieldLabel), /\\s+/, \"_\")): $cf.valueLabel }\n          })\n        ]) : {}\n            ])\n    }\n};\n\n    $attributes := $keys($);\n\n    $posting := $merge([$map($attributes, function($attribute) {\n        {\n            $attribute = \"function\" ? \"positionCategory\": $attribute : $lookup($, $attribute)\n        }\n    })\n]);\n\n    $transformJob($posting)\n)",
            "targetFields": [
              "JOVEO_JOB_ID",
              "JOVEO_JOB_CUSTOMER_ID",
              "ATS_JOB_ID",
              "ATS_JOB_REF_NUMBER",
              "ATS_JOB_TITLE",
              "ATS_JOB_DESCRIPTION",
              "ATS_JOB_URL",
              "ATS_JOB_LOCATIONS",
              "ATS_JOB_DEPARTMENT",
              "ATS_JOB_STATUS",
              "ATS_JOB_POSITION_CATEGORY",
              "ATS_JOB_POSITION_LEVEL",
              "ATS_JOB_REMOTE_TYPE",
              "ATS_JOB_COMPANY",
              "ATS_JOB_RECRUITERS",
              "ATS_JOB_HIRING_MANAGERS",
              "ATS_JOB_CREATED_DATE",
              "ATS_JOB_LAST_UPDATED_DATE",
              "ATS_JOB_START_DATE",
              "ATS_JOB_END_DATE",
              "ATS_JOB_INSERTED_AT",
              "ATS_JOB_UPDATED_AT",
              "ATS_JOB_CUSTOM_FIELDS",
              "ATS_JOB_IS_DELETED",
              "ATS_JOB_AUDIT"
            ],
            "targetOperation": "UPSERT"
          },
          "integrationDependency": {
            "dependentIntegrationId": "smart-recruiters-job-ad-change-event",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "postingId",
                "jsonataExpression": "jobAdId",
                "restApiIntegrationContext": "API_PATH"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/v1/companies/${companyIdentity}/postings/${postingId}",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [
            {
              "statusCode": 0,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "true"
                }
              ],
              "jsonataConvertorExpression": "$"
            }
          ],
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "false"
            }
          ]
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-get-ondemand-questions",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "$not($exists(data)) or $exists(data.questions)"
            }
          ],
          "dataModelTarget": {
            "dataModelJsonataExpression": "{\n    \"atsJobId\": \"${atsJobId}\",\n    \"refNumber\": \"${atsRefNumber}\",\n    \"customFields\": {\n        \"questions\": data.questions\n    }\n}",
            "targetFields": [
              "JOVEO_JOB_ID",
              "JOVEO_JOB_CUSTOMER_ID",
              "ATS_JOB_ID",
              "ATS_JOB_REF_NUMBER",
              "ATS_JOB_UPDATED_AT",
              "ATS_JOB_CUSTOM_FIELDS",
              "ATS_JOB_AUDIT"
            ],
            "targetOperation": "UPDATE"
          },
          "integrationDependency": {
            "dependentIntegrationId": "sr-get-posting",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "atsJobId",
                "jsonataExpression": "jobAdId",
                "restApiIntegrationContext": "API_PATH"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "atsJobId",
                "jsonataExpression": "jobAdId",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "atsRefNumber",
                "jsonataExpression": "refNumber",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": true,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "http://ats-unified-apis.prod.joveo.com:8080/v1/unified-apis/passthrough/ats-customer/${joveoCustomerId}/unified-jobs/${atsJobId}/questions",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "active=true"
            }
          ]
        }
      ]
    },
    {
      "dataModel": "CANDIDATE_QUESTION",
      "integrationType": "REST_API",
      "integrations": [
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-get-communityId-apply-questions-chain",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2"
          ],
          "apiPath": "/community-apply-api/communities/${communityId}/configuration",
          "headers": {},
          "queryParams": {
            "conditionalsIncluded": "true"
          },
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [
            {
              "statusCode": 0,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "true"
                }
              ],
              "jsonataConvertorExpression": "$"
            }
          ],
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "false"
            }
          ]
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-get-community-apply-questions",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": {
            "dependentIntegrationId": "sr-get-communityId-apply-questions-chain",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "language",
                "jsonataExpression": "($exists(inputData.language) and inputData.language!=null) ?  inputData.language : \"\"",
                "restApiIntegrationContext": "API_HEADER"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "communityId",
                "jsonataExpression": "inputData.communityId",
                "restApiIntegrationContext": "API_PATH"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2"
          ],
          "apiPath": "/community-apply-api/communities/${communityId}/configuration",
          "headers": {
            "Accept-Language": "${language}"
          },
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": []
        }
      ]
    },
    {
      "dataModel": "CANDIDATE",
      "integrationType": "WRITE_API_RESPONSE_HANDLER",
      "integrations": [
        {
          "type": "WriteApiIntegration",
          "integrationId": "sr-community-api-response-handler-chain",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false,
          "method": "POST",
          "authTypes": [
            "OAUTH_2"
          ],
          "apiPath": "/community-apply-api/communities/${communityId}/prospect",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "requestPayload": {
            "requestBody": "",
            "requestBodyConverter": []
          },
          "responseHandlers": [
            {
              "statusCode": 0,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "true"
                }
              ],
              "jsonataConvertorExpression": "($exists(sr_create_community_integration[0].profileId))?{\n    \"data\": {\n        \"candidateId\": sr_create_community_integration[0].profileId,    \n        \"customFields\":{\n            \"applicationId\": sr_create_community_integration[0].applicationId\n        }\n    }\n}:{\n    \"data\":null,\n    \"errors\":[{\n        \"errorCode\":\"500\",\n        \"errorType\":\"Internal error\",\n        \"message\":\"Error while creating community on sr.\",\n        \"params\":{\n            \"sr_create_community_integration_error\":$string(sr_create_community_integration[0].errorMessages),\n            \"error\":$\n        }\n    }]\n}"
            }
          ],
          "headersInResponse": false,
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "false"
            }
          ]
        }
      ]
    },
    {
      "dataModel": "JOB_QUESTION",
      "integrationType": "REST_API",
      "integrations": [
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-get-posting-screening-questions-chain",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": null,
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/postings/${postingId}/configuration",
          "headers": {},
          "queryParams": {
            "conditionalsIncluded": "true"
          },
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [
            {
              "statusCode": 0,
              "bodyRules": [
                {
                  "type": "BooleanExpressionRule",
                  "jsonataExpression": "$exists(inputData.atsJobId)"
                }
              ],
              "jsonataConvertorExpression": "$"
            }
          ],
          "executionEligibilityRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "false"
            }
          ]
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-get-posting-by-jobAdId",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": "{\n    \"language\": \"${language}\",\n    \"posting\": $\n}"
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": {
            "dependentIntegrationId": "sr-get-posting-screening-questions-chain",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "jobAdId",
                "jsonataExpression": "inputData.atsJobId",
                "restApiIntegrationContext": "API_PATH"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "language",
                "jsonataExpression": "($exists(inputData.language) and inputData.language!=null) ?  inputData.language : \"\"",
                "restApiIntegrationContext": "API_RESPONSE_BODY"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/v1/companies/${companyIdentity}/postings/${jobAdId}",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": []
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-get-posting-screening-questions",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": {
            "dependentIntegrationId": "sr-get-posting-by-jobAdId",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "postingId",
                "jsonataExpression": "posting.uuid",
                "restApiIntegrationContext": "API_PATH"
              },
              {
                "type": "RestApiIntegrationField",
                "targetField": "language",
                "jsonataExpression": "language",
                "restApiIntegrationContext": "API_HEADER"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": false,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "/postings/${postingId}/configuration",
          "headers": {
            "Accept-Language": "${language}"
          },
          "queryParams": {
            "conditionalsIncluded": "true"
          },
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": []
        },
        {
          "type": "ReadApiIntegration",
          "integrationId": "sr-get-posting-ucp-questions",
          "responseConfig": {
            "responseType": "SINGLE_ENTITY",
            "jsonataExpression": "$",
            "resPassingJsonataExpression": null
          },
          "dataModelRules": [
            {
              "type": "BooleanExpressionRule",
              "jsonataExpression": "true"
            }
          ],
          "dataModelTarget": null,
          "integrationDependency": {
            "dependentIntegrationId": "sr-get-posting-by-jobAdId",
            "dependencyFields": [
              {
                "type": "RestApiIntegrationField",
                "targetField": "postingId",
                "jsonataExpression": "posting.uuid",
                "restApiIntegrationContext": "API_PATH"
              }
            ],
            "jsonDataType": "TEXT_PRIMITIVE",
            "queryType": "SINGLE_ENTITY"
          },
          "failSilently": true,
          "method": "GET",
          "authTypes": [
            "OAUTH_2",
            "API_KEY"
          ],
          "apiPath": "https://api.smartrecruiters.com/oneclick-api/apply-experience/posting/${postingId}",
          "headers": {},
          "queryParams": {},
          "contentType": "APPLICATION_JSON",
          "paginationConfig": null,
          "requestPayload": null,
          "dateRangeConfig": null,
          "responseHandlers": [],
          "executionEligibilityRules": []
        }
      ]
    }
  ],
  "status_code": 200
}